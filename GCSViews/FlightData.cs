using GMap.NET;
using GMap.NET.MapProviders;
using GMap.NET.WindowsForms;
using GMap.NET.WindowsForms.Markers;
using log4net;
using Microsoft.WindowsAPICodePack.Dialogs;
using MissionPlanner.ArduPilot;
using MissionPlanner.Controls;
using MissionPlanner.GCSViews.ConfigurationView;
using MissionPlanner.Joystick;
using MissionPlanner.Log;
using MissionPlanner.Maps;
using MissionPlanner.Utilities;
using MissionPlanner.Warnings;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using SharpDX.DirectInput;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Media;
using System.Net;
using System.Net.NetworkInformation;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using WebCamService;
using ZedGraph;
using LogAnalyzer = MissionPlanner.Utilities.LogAnalyzer;

namespace MissionPlanner.GCSViews
{
    public partial class FlightData : MyUserControl, IActivate, IDeactivate
    {
        public static FlightData instance;
        public static GMapOverlay kmlpolygons;
        public static HUD myhud;
        public static myGMAP mymap;
        public static bool threadrun;
        public SplitContainer MainHcopy;
        internal static GMapOverlay geofence;
        internal static GMapOverlay photosoverlay;
        internal static GMapOverlay poioverlay = new GMapOverlay("POI");
        internal static GMapOverlay rallypointoverlay;
        internal static GMapOverlay tfrpolygons;
        internal GMapMarker CurrentGMapMarker;
        internal PointLatLng MouseDownStart;
        //The file path of the selected script
        internal string selectedscript = "";

        private static readonly ILog log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);
        AviWriter aviwriter;
        private bool CameraOverlap;
        GMapMarker center = new GMarkerGoogle(new PointLatLng(0.0, 0.0), GMarkerGoogleType.none);
        /// <summary>
        /// Try to reduce the number of map position changes generated by the code
        /// </summary>
        DateTime lastmapposchange = DateTime.MinValue;

        DateTime lastscreenupdate = DateTime.Now;
        RollingPointPairList list1 = new RollingPointPairList(1200);
        RollingPointPairList list10 = new RollingPointPairList(1200);
        CurveItem list10curve;
        PropertyInfo list10item;
        CurveItem list1curve;
        PropertyInfo list1item;
        RollingPointPairList list2 = new RollingPointPairList(1200);
        CurveItem list2curve;
        PropertyInfo list2item;
        RollingPointPairList list3 = new RollingPointPairList(1200);
        CurveItem list3curve;
        PropertyInfo list3item;
        RollingPointPairList list4 = new RollingPointPairList(1200);
        CurveItem list4curve;
        PropertyInfo list4item;
        RollingPointPairList list5 = new RollingPointPairList(1200);
        CurveItem list5curve;
        PropertyInfo list5item;
        RollingPointPairList list6 = new RollingPointPairList(1200);
        CurveItem list6curve;
        PropertyInfo list6item;
        RollingPointPairList list7 = new RollingPointPairList(1200);
        CurveItem list7curve;
        PropertyInfo list7item;
        RollingPointPairList list8 = new RollingPointPairList(1200);
        CurveItem list8curve;
        PropertyInfo list8item;
        RollingPointPairList list9 = new RollingPointPairList(1200);
        CurveItem list9curve;
        PropertyInfo list9item;
        double LogPlayBackSpeed = 1.0;
        GMapMarker marker;

        bool playingLog;
        GMapOverlay polygons;
        //private Propagation prop;
        Random random = new Random();
        GMapRoute route;
        GMapOverlay routes;

        // poi layer
        List<TabPage> TabListOriginal = new List<TabPage>();

        Thread thisthread;
        int tickStart;
        //      private DockStateSerializer _serializer = null;

        List<PointLatLng> trackPoints = new List<PointLatLng>();
        volatile int updateBindingSourcecount;

        object updateBindingSourcelock = new object();

        string updateBindingSourceThreadName = "";

        //RollingPointPairList depthRollingList = new RollingPointPairList(50);

        MathNet.Filtering.OnlineFilter depthFilter = MathNet.Filtering.OnlineFilter.CreateDenoise(10);

        MathNet.Filtering.OnlineFilter speedMedianFilter = new MathNet.Filtering.Median.OnlineMedianFilter(10);
        MathNet.Filtering.OnlineFilter distRemainMedianFilter = new MathNet.Filtering.Median.OnlineMedianFilter(10);

        SoundPlayer simpleSound = new SoundPlayer(Properties.Resources.alarma_depth);
        bool depthAlarmSound = true;

        //Capa utilizada para dibujar el Geotiff
        public GMapOverlay tiffOverlay;
        public GMarkerGoogle tiffMarker;

        public FlightData()
        {
            
            log.Info("Ctor Start");

            InitializeComponent();

            CustomColor.SetDisarmColor(BUT_ARM);
            
            gMapControl1.RoutesEnabled = true;
            //load mapa

            mymap = gMapControl1;
            myhud = hud1;
            MainHcopy = MainH;
            log.Info("Components Done");

            instance = this;
            //    _serializer = new DockStateSerializer(dockContainer1);
            //    _serializer.SavePath = Application.StartupPath + Path.DirectorySeparatorChar + "FDscreen.xml";
            //    dockContainer1.PreviewRenderer = new PreviewRenderer();
            //
            mymap = gMapControl1;
            myhud = hud1;
            MainHcopy = MainH;

            mymap.Paint += mymap_Paint;

            // populate the unmodified base list
            tabControlactions.TabPages.ForEach(i => { TabListOriginal.Add((TabPage)i); });

            //  mymap.Manager.UseMemoryCache = false;

            log.Info("Tunning Graph Settings");
            // setup default tuning graph
            if (Settings.Instance["Tuning_Graph_Selected"] != null)
            {
                string line = Settings.Instance["Tuning_Graph_Selected"].ToString();
                string[] lines = line.Split(new[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
                foreach (string option in lines)
                {
                    using (var cb = new CheckBox { Name = option, Checked = true })
                    {
                        chk_box_CheckedChanged(cb, EventArgs.Empty);
                    }
                }
            }
            else
            {
                using (var cb = new CheckBox { Name = "roll", Checked = true })
                {
                    chk_box_CheckedChanged(cb, EventArgs.Empty);
                }
                using (var cb = new CheckBox { Name = "pitch", Checked = true })
                {
                    chk_box_CheckedChanged(cb, EventArgs.Empty);
                }
                using (var cb = new CheckBox { Name = "nav_roll", Checked = true })
                {
                    chk_box_CheckedChanged(cb, EventArgs.Empty);
                }
                using (var cb = new CheckBox { Name = "nav_pitch", Checked = true })
                {
                    chk_box_CheckedChanged(cb, EventArgs.Empty);
                }
            }

            if (!string.IsNullOrEmpty(Settings.Instance["hudcolor"]))
            {
                hud1.hudcolor = Color.FromName(Settings.Instance["hudcolor"]);
            }

            log.Info("HUD Settings");
            foreach (string item in Settings.Instance.Keys)
            {
                if (item.StartsWith("hud1_useritem_"))
                {
                    string selection = item.Replace("hud1_useritem_", "");

                    HUD.Custom cust = new HUD.Custom();
                    cust.Header = Settings.Instance[item];
                    HUD.Custom.src = MainV2.comPort.MAV.cs;

                    addHudUserItem(ref cust, selection);

                }
            }


            List<string> list = new List<string>();

            {
                list.Add("LOITER_UNLIM");
                list.Add("RETURN_TO_LAUNCH");
                list.Add("PREFLIGHT_CALIBRATION");
                list.Add("MISSION_START");
                list.Add("PREFLIGHT_REBOOT_SHUTDOWN");
                list.Add("Trigger Camera NOW");
                list.Add("SYSTEM_TIME");
                //DO_SET_SERVO
                //DO_REPEAT_SERVO
            }

            CMB_setwp.SelectedIndex = 0;

            log.Info("Graph Setup");
            CreateChart(zg1);

            // config map      
            log.Info("Map Setup");
            gMapControl1.CacheLocation = Settings.GetDataDirectory() +
                                         "gmapcache" + Path.DirectorySeparatorChar;
            gMapControl1.MinZoom = 0;
            gMapControl1.MaxZoom = 24;
            gMapControl1.Zoom = 3;

            gMapControl1.OnMapZoomChanged += gMapControl1_OnMapZoomChanged;

            gMapControl1.DisableFocusOnMouseEnter = true;

            gMapControl1.OnMarkerEnter += gMapControl1_OnMarkerEnter;
            gMapControl1.OnMarkerLeave += gMapControl1_OnMarkerLeave;

            gMapControl1.RoutesEnabled = true;
            gMapControl1.PolygonsEnabled = true;

            tfrpolygons = new GMapOverlay("tfrpolygons");
            gMapControl1.Overlays.Add(tfrpolygons);

            kmlpolygons = new GMapOverlay("kmlpolygons");
            gMapControl1.Overlays.Add(kmlpolygons);

            geofence = new GMapOverlay("geofence");
            gMapControl1.Overlays.Add(geofence);

            polygons = new GMapOverlay("polygons");
            gMapControl1.Overlays.Add(polygons);

            photosoverlay = new GMapOverlay("photos overlay");
            gMapControl1.Overlays.Add(photosoverlay);

            routes = new GMapOverlay("routes");
            gMapControl1.Overlays.Add(routes);

            rallypointoverlay = new GMapOverlay("rally points");
            gMapControl1.Overlays.Add(rallypointoverlay);

            gMapControl1.Overlays.Add(poioverlay);


            MainV2.comPort.ParamListChanged += FlightData_ParentChanged;
            /* contextMenuStripHud.Visible = false;
             contextMenuStripHud.Items.RemoveByKey("1"); */


            NUM_DepthAlarmValue.Value = (decimal)Settings.Instance.GetDouble("DEPTH_ALARM", 0.30);

            depthAlarmSound = Settings.Instance.GetBoolean("depthAlarmSound", true);
            depthAlarmSound = !depthAlarmSound;
            BUT_Mute_Click(null, null);

            //Para dibujar el Geotiff en esta capa.
            tiffOverlay = new GMapOverlay("Geotiff");
            gMapControl1.Overlays.Insert(0, tiffOverlay);

            //Inicializar el Reporter Dialog
            CreateIProgressReporterDialogue += title =>
                new ProgressReporterDialogue() { StartPosition = FormStartPosition.CenterScreen, Text = title };

        }

        private void Bind_Parse(object sender, ConvertEventArgs e)
        {
            UpdateButColorMode();
        }

        public void Activate()
        {

            log.Info("Activate Called");

            OnResize(EventArgs.Empty);

            if (CB_tuning.Checked)
                ZedGraphTimer.Start();

            hud1.altunit = CurrentState.AltUnit;
            hud1.speedunit = CurrentState.SpeedUnit;
            hud1.distunit = CurrentState.DistanceUnit;
            coords1.AltUnit = CurrentState.AltUnit;

            if (MainV2.MONO)
            {
                if (!hud1.Visible)
                    hud1.Visible = true;
                if (!hud1.Enabled)
                    hud1.Enabled = true;

                hud1.Dock = DockStyle.Fill;
            }

            for (int f = 1; f < 30; f++)
            {
                // load settings
                if (Settings.Instance["quickView" + f] != null)
                {
                    Control[] ctls = Controls.Find("quickView" + f, true);
                    if (ctls.Length > 0)
                    {
                        QuickView QV = (QuickView)ctls[0];

                        // set description and unit
                        string desc = Settings.Instance["quickView" + f];
                        if (QV.Tag == null)
                            QV.Tag = desc;
                        QV.desc = MainV2.comPort.MAV.cs.GetNameandUnit(desc);

                        // set databinding for value
                        QV.DataBindings.Clear();
                        try
                        {
                            QV.DataBindings.Add(new Binding("number", bindingSourceHud,
                                Settings.Instance["quickView" + f], false));
                        }
                        catch (Exception ex)
                        {
                            log.Debug(ex);
                        }
                    }
                }
                else
                {
                    // if no config, update description on predefined
                    try
                    {
                        Control[] ctls = Controls.Find("quickView" + f, true);
                        if (ctls.Length > 0)
                        {
                            QuickView QV = (QuickView)ctls[0];
                            string desc = QV.desc;
                            if (QV.Tag == null)
                                QV.Tag = desc;
                            QV.desc = MainV2.comPort.MAV.cs.GetNameandUnit(QV.Tag.ToString());
                        }
                    }
                    catch (Exception ex)
                    {
                        log.Debug(ex);
                    }
                }
            }

            //CheckBatteryShow();

            // make sure the hud user items/warnings/checklist are using the current state
            HUD.Custom.src = MainV2.comPort.MAV.cs;
            CustomWarning.defaultsrc = MainV2.comPort.MAV.cs;
            MissionPlanner.Controls.PreFlight.CheckListItem.defaultsrc = MainV2.comPort.MAV.cs;

            if (Settings.Instance["maplast_lat"] != "")
            {
                try
                {
                    gMapControl1.Position = new PointLatLng(Settings.Instance.GetDouble("maplast_lat"),
                        Settings.Instance.GetDouble("maplast_lng"));
                    if (Math.Round(Settings.Instance.GetDouble("maplast_lat"), 1) == 0)
                    {
                        // no zoom in
                        Zoomlevel.Value = 3;
                        TRK_zoom.Value = 3;
                    }
                    else
                    {
                        var zoom = Settings.Instance.GetFloat("maplast_zoom");
                        if (Zoomlevel.Maximum < (decimal)zoom)
                            zoom = (float)Zoomlevel.Maximum;
                        Zoomlevel.Value = (decimal)zoom;
                        TRK_zoom.Value = (float)Zoomlevel.Value;
                    }
                }
                catch
                {
                }
            }

            hud1.doResize();

        }

        public void BUT_playlog_Click(object sender, EventArgs e)
        {
            if (MainV2.comPort.logreadmode)
            {
                MainV2.comPort.logreadmode = false;
                ZedGraphTimer.Stop();
                playingLog = false;
            }
            else
            {
                // BUT_clear_track_Click(sender, e);
                MainV2.comPort.logreadmode = true;
                list1.Clear();
                list2.Clear();
                list3.Clear();
                list4.Clear();
                list5.Clear();
                list6.Clear();
                list7.Clear();
                list8.Clear();
                list9.Clear();
                list10.Clear();
                tickStart = Environment.TickCount;

                zg1.GraphPane.XAxis.Scale.Min = 0;
                zg1.GraphPane.XAxis.Scale.Max = 1;
                ZedGraphTimer.Start();
                playingLog = true;
            }
        }

        public void CaptureMJPEG_OnNewImage(object sender, EventArgs e)
        {
            myhud.bgimage = (Image)sender;
        }

        
        /*
        public void CheckBatteryShow()
        {
            // ensure battery display is on - also set in hud if current is updated
            if (MainV2.comPort.MAV.param.ContainsKey("BATT_MONITOR") &&
                (float)MainV2.comPort.MAV.param["BATT_MONITOR"] != 0)
            {
                hud1.batteryon = false;
            }
            else
            {
                hud1.batteryon = false;
            }
        }
        */

        public void CreateChart(ZedGraphControl zgc)
        {
            GraphPane myPane = zgc.GraphPane;

            // Set the titles and axis labels
            myPane.Title.Text = "Tuning";
            myPane.XAxis.Title.Text = "Time (s)";
            myPane.YAxis.Title.Text = "Unit";

            // Show the x axis grid
            myPane.XAxis.MajorGrid.IsVisible = true;

            myPane.XAxis.Scale.Min = 0;
            myPane.XAxis.Scale.Max = 5;

            // Make the Y axis scale red
            myPane.YAxis.Scale.FontSpec.FontColor = Color.White;
            myPane.YAxis.Title.FontSpec.FontColor = Color.White;
            // turn off the opposite tics so the Y tics don't show up on the Y2 axis
            myPane.YAxis.MajorTic.IsOpposite = false;
            myPane.YAxis.MinorTic.IsOpposite = false;
            // Don't display the Y zero line
            myPane.YAxis.MajorGrid.IsZeroLine = true;
            // Align the Y axis labels so they are flush to the axis
            myPane.YAxis.Scale.Align = AlignP.Inside;
            // Manually set the axis range
            //myPane.YAxis.Scale.Min = -1;
            //myPane.YAxis.Scale.Max = 1;

            // Fill the axis background with a gradient
            //myPane.Chart.Fill = new Fill(Color.White, Color.LightGray, 45.0f);

            // Sample at 50ms intervals
            ZedGraphTimer.Interval = 200;
            //timer1.Enabled = true;
            //timer1.Start();


            // Calculate the Axis Scale Ranges
            //zgc.AxisChange();

            tickStart = Environment.TickCount;
        }

        public void CreateDepthChart(ZedGraphControl zgc)
        {
            GraphPane myPane = zgc.GraphPane;

            myPane.Legend.IsVisible = false;

            // Set the titles and axis labels
            myPane.Title.Text = "Depth (m)";
            myPane.Title.FontSpec.Size = 24;
            myPane.XAxis.Title.Text = "Time (s)";
            myPane.XAxis.Title.FontSpec.Size = 22;
            myPane.XAxis.Scale.FontSpec.Size = 22;
            myPane.YAxis.Title.IsVisible = false;

            // Show the x axis grid
            myPane.XAxis.MajorGrid.IsVisible = true;
            myPane.XAxis.MinorTic.IsAllTics = false;
            myPane.XAxis.Scale.Min = 0;
            myPane.XAxis.Scale.Max = 5;

            // Make the Y axis scale red
            myPane.YAxis.Scale.FontSpec.FontColor = Color.White;
            myPane.YAxis.Title.FontSpec.FontColor = Color.White;
            myPane.YAxis.Scale.FontSpec.Size = 28;
            // turn off the opposite tics so the Y tics don't show up on the Y2 axis
            myPane.YAxis.MajorTic.IsOpposite = false;
            myPane.YAxis.MinorTic.IsOpposite = false;

            myPane.YAxis.MinorTic.IsAllTics = false;

            // Don't display the Y zero line
            myPane.YAxis.MajorGrid.IsZeroLine = false;
            // Align the Y axis labels so they are flush to the axis
            myPane.YAxis.Scale.Align = AlignP.Inside;
            // Manually set the axis range
            //myPane.YAxis.Scale.Min = 0;
            //myPane.YAxis.Scale.Max = 100;

            // Calculate the Axis Scale Ranges
            zgc.AxisChange();
        }

        public void Deactivate()
        {
            if (MainV2.MONO)
            {
                hud1.Dock = DockStyle.None;
                hud1.Size = new Size(5, 5);
                hud1.Enabled = false;
                hud1.Visible = false;
            }
            //     hud1.Location = new Point(-1000,-1000);

            Settings.Instance["maplast_lat"] = gMapControl1.Position.Lat.ToString();
            Settings.Instance["maplast_lng"] = gMapControl1.Position.Lng.ToString();
            Settings.Instance["maplast_zoom"] = gMapControl1.Zoom.ToString();

            ZedGraphTimer.Stop();
        }

        public void LoadLogFile(string file)
        {
            if (file != "")
            {
                try
                {
                    BUT_clear_track_Click(null, null);

                    MainV2.comPort.logreadmode = true;
                    MainV2.comPort.logplaybackfile = new BinaryReader(File.OpenRead(file));
                    MainV2.comPort.lastlogread = DateTime.MinValue;

                    //LBL_logfn.Text = Path.GetFileName(file);

                    log.Info("Open logfile " + file);

                    MainV2.comPort.getHeartBeat();

                    tracklog.Value = 0;
                    tracklog.Minimum = 0;
                    tracklog.Maximum = 100;
                }
                catch
                {
                    CustomMessageBox.Show(Strings.PleaseLoadValidFile, Strings.ERROR);
                }
            }
        }

        //Updates the visibility of the payload control tab based on whether the payload target is available or not
        public void updatePayloadTabVisible()
        {
            bool gimbalPresent = false;

            //if the currently connected target is a flight controller check if there is an associated mavlink gimbal
            if (MainV2.comPort.compidcurrent == 1)
            {
                foreach (var mav in MainV2.comPort.MAVlist)
                {
                    if (mav.sysid == MainV2.comPort.sysidcurrent && mav.compid == (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_GIMBAL)
                    {
                        gimbalPresent = true;
                        break;
                    }
                }
            }

        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            MainV2.comPort.logreadmode = false;
            try
            {
                if (hud1 != null)
                    Settings.Instance["FlightSplitter"] = MainH.SplitterDistance.ToString();
            }
            catch
            {
            }

            if (polygons != null)
                polygons.Dispose();
            if (routes != null)
                routes.Dispose();
            if (route != null)
                route.Dispose();
            if (marker != null)
                marker.Dispose();
            if (aviwriter != null)
                aviwriter.Dispose();

//            if (prop != null)
//                prop.Stop();

            if (disposing && (components != null))
            {
                components.Dispose();
            }
        }

        protected override void OnInvalidated(InvalidateEventArgs e)
        {
            base.OnInvalidated(e);
            updateBindingSourceWork();
        }

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            if (keyData == (Keys.Control | Keys.D1))
            {
                tabControlactions.SelectedIndex = 0;
                return true;
            }
            else if (keyData == (Keys.Control | Keys.D2))
            {
                tabControlactions.SelectedIndex = 1;
                return true;
            }
            else if (keyData == (Keys.Control | Keys.D3))
            {
                tabControlactions.SelectedIndex = 2;
                return true;
            }
            else if (keyData == (Keys.Control | Keys.D4))
            {
                tabControlactions.SelectedIndex = 3;
                return true;
            }
            else if (keyData == (Keys.Control | Keys.D5))
            {
                tabControlactions.SelectedIndex = 4;
                return true;
            }
            else if (keyData == (Keys.Control | Keys.D6))
            {
                tabControlactions.SelectedIndex = 5;
                return true;
            }
            else if (keyData == (Keys.Control | Keys.D7))
            {
                tabControlactions.SelectedIndex = 6;
                return true;
            }
            else if (keyData == (Keys.Control | Keys.D8))
            {
                tabControlactions.SelectedIndex = 7;
                return true;
            }
            else if (keyData == (Keys.Control | Keys.D9))
            {
                tabControlactions.SelectedIndex = 8;
                return true;
            }
            else if (keyData == (Keys.Control | Keys.D0))
            {
                tabControlactions.SelectedIndex = 9;
                return true;
            }

            if (keyData == (Keys.Space))
            {
                if (MainV2.comPort.logplaybackfile != null)
                {
                    BUT_playlog_Click(null, null);
                    return true;
                }
            }
            else if (keyData == (Keys.Subtract))
            {
                if (LogPlayBackSpeed > 1)
                    LogPlayBackSpeed--;
                else
                    LogPlayBackSpeed /= 2;

                updateLogPlayPosition();
            }
            else if (keyData == (Keys.Add))
            {
                if (LogPlayBackSpeed > 1)
                    LogPlayBackSpeed++;
                else
                    LogPlayBackSpeed *= 2;

                updateLogPlayPosition();
            }

            return false;
        }

        void addHudUserItem(ref HUD.Custom cust, string name)
        {
            setupPropertyInfo(ref cust.Item, name, MainV2.comPort.MAV.cs);

            hud1.CustomItems[name] = cust;

            hud1.Invalidate();
        }

        private void addMissionPhotoMarker(GMapMarker marker)
        {
            // not async
            Invoke((Action)delegate
            {
                photosoverlay.Markers.Add(marker);
            });
        }

        private void addMissionRouteMarker(GMapMarker marker)
        {
            // not async
            Invoke((Action)delegate
            {
                routes.Markers.Add(marker);
            });
        }

        private void addPoiToolStripMenuItem_Click(object sender, EventArgs e)
        {
            POI.POIAdd(MouseDownStart);
        }

        private void addpolygonmarker(string tag, double lng, double lat, int alt, Color? color, GMapOverlay overlay)
        {
            try
            {
                PointLatLng point = new PointLatLng(lat, lng);
                GMarkerGoogle m = new GMarkerGoogle(point, GMarkerGoogleType.green);
                m.ToolTipMode = MarkerTooltipMode.Always;
                m.ToolTipText = tag;
                m.Tag = tag;

                GMapMarkerRect mBorders = new GMapMarkerRect(point);
                {
                    mBorders.InnerMarker = m;
                    try
                    {
                        mBorders.wprad =
                            (int)(Settings.Instance.GetFloat("TXT_WPRad") / CurrentState.multiplierdist);
                    }
                    catch
                    {
                    }
                    if (color.HasValue)
                    {
                        mBorders.Color = color.Value;
                    }
                }

                Invoke((Action)delegate
               {
                   overlay.Markers.Add(m);
                   overlay.Markers.Add(mBorders);
               });
            }
            catch (Exception)
            {
            }
        }

        private void addpolygonmarkerred(string tag, double lng, double lat, int alt, Color? color, GMapOverlay overlay)
        {
            try
            {
                PointLatLng point = new PointLatLng(lat, lng);
                GMarkerGoogle m = new GMarkerGoogle(point, GMarkerGoogleType.red);
                m.ToolTipMode = MarkerTooltipMode.Always;
                m.ToolTipText = tag;
                m.Tag = tag;

                GMapMarkerRect mBorders = new GMapMarkerRect(point);
                {
                    mBorders.InnerMarker = m;
                }

                Invoke((Action)delegate
               {
                   overlay.Markers.Add(m);
                   overlay.Markers.Add(mBorders);
               });
            }
            catch (Exception)
            {
            }
        }

        private void altitudeAngelSettingsToolStripMenuItem_Click(object sender, EventArgs e)
        {
//            new Utilities.AltitudeAngel.AASettings().Show(this);
        }

        private void BUT_abortland_Click(object sender, EventArgs e)
        {
            if (!MainV2.comPort.BaseStream.IsOpen)
                return;

            try
            {
                MainV2.comPort.doAbortLand();
            }
            catch
            {
                CustomMessageBox.Show(Strings.CommandFailed, Strings.ERROR);
            }
        }

        private void BUT_ARM_Click(object sender, EventArgs e)
        {
            if (!MainV2.comPort.BaseStream.IsOpen)
                return;

            // arm the MAV
            try
            {
                var isitarmed = MainV2.comPort.MAV.cs.armed;
                var action = MainV2.comPort.MAV.cs.armed ? "Disarm" : "Arm";

                if (isitarmed)
                    if (CustomMessageBox.Show("Are you sure you want to " + action, action, CustomMessageBox.MessageBoxButtons.YesNo) !=
                        CustomMessageBox.DialogResult.Yes)
                        return;
                StringBuilder sb = new StringBuilder();
                var sub = MainV2.comPort.SubscribeToPacketType(MAVLink.MAVLINK_MSG_ID.STATUSTEXT, message =>
                {
                    sb.AppendLine(ASCIIEncoding.ASCII.GetString(((MAVLink.mavlink_statustext_t)message.data).text).TrimEnd('\0'));
                    return true;
                });
                bool ans = MainV2.comPort.doARM(!isitarmed);
                MainV2.comPort.UnSubscribeToPacketType(sub);
                if (ans == false)
                {
                    if (CustomMessageBox.Show(action + " failed.\n" + sb.ToString() + "\nForce " + action + " can bypass safety checks,\nwhich can lead to the vehicle crashing\nand causing serious injuries.\n\nDo you wish to Force " + action + "?", Strings.ERROR, CustomMessageBox.MessageBoxButtons.YesNo, CustomMessageBox.MessageBoxIcon.Exclamation, "Force " + action, "Cancel") == CustomMessageBox.DialogResult.Yes)
                    {
                        ans = MainV2.comPort.doARM(!isitarmed, true);
                        if (ans == false)
                        {
                            CustomMessageBox.Show(Strings.ErrorRejectedByMAV, Strings.ERROR);
                        }
                    }
                }
            }
            catch
            {
                CustomMessageBox.Show(Strings.ErrorNoResponce, Strings.ERROR);
            }
        }

        private void but_bintolog_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog ofd = new OpenFileDialog())
            {
                ofd.Filter = "Binary Log|*.bin;*.BIN";
                ofd.Multiselect = true;

                ofd.ShowDialog();

                foreach (string logfile in ofd.FileNames)
                {
                    string outfilename = Path.GetDirectoryName(logfile) + Path.DirectorySeparatorChar +
                                         Path.GetFileNameWithoutExtension(logfile) + ".log";

                    BinaryLog.ConvertBin(logfile, outfilename);
                }
            }
        }

        private void BUT_clear_track_Click(object sender, EventArgs e)
        {
            if (route != null)
                route.Points.Clear();

            if (MainV2.comPort.MAV.camerapoints != null)
                MainV2.comPort.MAV.camerapoints.Clear();
        }

        void but_Click(object sender, EventArgs e)
        {
            foreach (MainSwitcher.Screen sc in MainV2.View.screens)
            {
                if (sc.Name == "FlightPlanner")
                {
                    splitContainer1.Panel2.Controls.Remove(sc.Control);
                    splitContainer1.Panel2.Controls.Remove((Control)sender);
                    sc.Control.Visible = false;

                    if (sc.Control is IDeactivate)
                    {
                        ((IDeactivate)(sc.Control)).Deactivate();
                    }

                    break;
                }
            }

            foreach (Control ctl in splitContainer1.Panel2.Controls)
            {
                ctl.Visible = true;
            }
        }

        private void but_dflogtokml_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog openFileDialog1 = new OpenFileDialog())
            {
                openFileDialog1.Filter = "Log Files|*.log;*.bin;*.BIN;*.LOG";
                openFileDialog1.FilterIndex = 2;
                openFileDialog1.RestoreDirectory = true;
                openFileDialog1.Multiselect = true;
                try
                {
                    openFileDialog1.InitialDirectory = Settings.Instance.LogDir + Path.DirectorySeparatorChar;
                }
                catch
                {
                } // incase dir doesnt exist

                if (openFileDialog1.ShowDialog() == DialogResult.OK)
                {
                    foreach (string logfile in openFileDialog1.FileNames)
                    {
                        LogOutput lo = new LogOutput();
                        try
                        {
                            StreamReader tr;

                            if (logfile.ToLower().EndsWith(".bin"))
                            {
                                using (tr = new StreamReader(logfile))
                                {
                                    GC.Collect();
                                    DFLogBuffer temp = new DFLogBuffer(tr.BaseStream);

                                    uint a = 0;
                                    foreach (var line in temp)
                                    {
                                        lo.processLine(line);
                                        a++;

                                        if ((a % 100000) == 0)
                                            Console.WriteLine(a);
                                    }

                                    temp.Dispose();
                                }
                            }
                            else
                            {
                                using (tr = new StreamReader(logfile))
                                {
                                    while (!tr.EndOfStream)
                                    {
                                        lo.processLine(tr.ReadLine());
                                    }

                                    tr.Close();
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            CustomMessageBox.Show("Error processing file. Make sure the file is not in use.\n" + ex);
                        }

                        lo.writeKML(logfile + ".kml");
                    }
                }
            }
        }

        private void BUT_DFMavlink_Click(object sender, EventArgs e)
        {
            var form = new LogDownloadMavLink();

            form.Show();
        }

        private void but_disablejoystick_Click(object sender, EventArgs e)
        {
            if (MainV2.joystick != null && MainV2.joystick.enabled)
            {
                MainV2.joystick.enabled = false;

                MainV2.joystick.clearRCOverride();

                but_disablejoystick.Visible = false;
            }
        }

        private void BUT_edit_selected_Click(object sender, EventArgs e)
        {
            try
            {
                ProcessStartInfo psi = new ProcessStartInfo(selectedscript);
                psi.UseShellExecute = true;
                Process.Start(psi);
            }
            catch
            {
            }
        }

        private void BUT_Homealt_Click(object sender, EventArgs e)
        {
            if (MainV2.comPort.MAV.cs.altoffsethome != 0)
            {
                MainV2.comPort.MAV.cs.altoffsethome = 0;
            }
            else
            {
                MainV2.comPort.MAV.cs.altoffsethome = (float)(-MainV2.comPort.MAV.cs.HomeAlt / CurrentState.multiplieralt);
            }
        }

        bool stateJoys = false;
        private void activatedjoy(object sender, EventArgs e)
        {
            if (stateJoys == false) {
                stateJoys = !stateJoys;
                JoystickSetup JoystickSetup = new JoystickSetup();
                JoystickSetup.Joystick_Load(sender, e);

                JoystickSetup.BUT_enable_Click(sender, e);
                Thread.Sleep(100);
                if (JoystickSetup.hay_joystick == false)
                {
                    CustomColor.RestoreColor(BUT_EchoGrab);
                }
                else {
                    CustomColor.SetActiveMode(BUT_EchoGrab);
                }
            }
            else
            {
               CustomColor.RestoreColor(BUT_EchoGrab);
                stateJoys = !stateJoys;
                but_disablejoystick_Click(sender, e);
            }
        }

        private void BUT_loadtelem_Click(object sender, EventArgs e)
        {
            // LBL_logfn.Text = "";

            if (MainV2.comPort.logplaybackfile != null)
            {
                try
                {
                    MainV2.comPort.logplaybackfile.Close();
                    MainV2.comPort.logplaybackfile = null;
                }
                catch
                {
                }
            }

            using (OpenFileDialog fd = new OpenFileDialog())
            {
                fd.AddExtension = true;
                fd.Filter = "Telemetry log (*.tlog)|*.tlog;*.tlog.*|Mavlink Log (*.mavlog)|*.mavlog";
                fd.InitialDirectory = Settings.Instance.LogDir;
                fd.DefaultExt = ".tlog";
                DialogResult result = fd.ShowDialog();
                string file = fd.FileName;
                LoadLogFile(file);
            }
        }

        private void BUT_log2kml_Click(object sender, EventArgs e)
        {
            Form frm = new MavlinkLog();
//            ThemeManager.ApplyThemeTo(frm);
            frm.Show();
        }

        private void BUT_loganalysis_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog ofd = new OpenFileDialog())
            {
                ofd.Filter = "*.log;*.bin|*.log;*.bin;*.BIN;*.LOG";
                ofd.ShowDialog();

                if (ofd.FileName != "")
                {
                    string newlogfile = null;

                    if (ofd.FileName.ToLower().EndsWith(".bin"))
                    {
                        newlogfile = Path.GetTempFileName() + ".log";

                        try
                        {
                            BinaryLog.ConvertBin(ofd.FileName, newlogfile);
                        }
                        catch (IOException ex)
                        {
                            CustomMessageBox.Show("File access issue: " + ex.Message, Strings.ERROR);
                            return;
                        }

                        ofd.FileName = newlogfile;
                    }

                    string xmlfile = LogAnalyzer.CheckLogFile(ofd.FileName);

                    GC.Collect();

                    if (File.Exists(xmlfile))
                    {
                        try
                        {
                            var out1 = LogAnalyzer.Results(xmlfile);

                            Controls.LogAnalyzer frm = new Controls.LogAnalyzer(out1);

//                            ThemeManager.ApplyThemeTo(frm);

                            frm.Show();
                        }
                        catch (Exception ex)
                        {
                            CustomMessageBox.Show("Failed to load analyzer results\n" + ex.ToString());
                        }
                    }
                    else
                    {
                        CustomMessageBox.Show("Bad input file");
                    }

                    if (!String.IsNullOrEmpty(newlogfile))
                    {
                        try
                        {
                            File.Delete(newlogfile);
                        }
                        catch
                        {
                        }
                    }
                }
            }
        }

        private void BUT_logbrowse_Click(object sender, EventArgs e)
        {
            Form logbrowse = new LogBrowse();
//            ThemeManager.ApplyThemeTo(logbrowse);
            logbrowse.Show();
        }

        private void BUT_matlab_Click(object sender, EventArgs e)
        {
            MatLabForms.ProcessLog();
        }

        private void BUT_quickauto_Click(object sender, EventArgs e)
        {
            try
            {
                ((Control)sender).Enabled = false;
                MainV2.comPort.setMode("Auto");
            }
            catch
            {
                CustomMessageBox.Show(Strings.CommandFailed, Strings.ERROR);
            }
            ((Control)sender).Enabled = true;
        }

        private void BUT_loiter_Click(object sender, EventArgs e)
        {
            try
            {
                ((Control)sender).Enabled = false;
                if (MainV2.comPort.MAV.cs.firmware == Firmwares.ArduPlane ||
                    MainV2.comPort.MAV.cs.firmware == Firmwares.Ateryx ||
                    MainV2.comPort.MAV.cs.firmware == Firmwares.ArduRover)
                    MainV2.comPort.setMode("Loiter");
                if (MainV2.comPort.MAV.cs.firmware == Firmwares.ArduCopter2)
                    MainV2.comPort.setMode("Loiter"); 
            }
            catch
            {
                CustomMessageBox.Show(Strings.CommandFailed, Strings.ERROR);
            }
            ((Control)sender).Enabled = true;
        }

        private void BUT_quickrtl_Click(object sender, EventArgs e)
        {
            try
            {
                ((Control)sender).Enabled = false;
                MainV2.comPort.setMode("RTL");
            }
            catch
            {
                CustomMessageBox.Show(Strings.CommandFailed, Strings.ERROR);
            }
            ((Control)sender).Enabled = true;
        }

        private void BUT_RAWSensor_Click(object sender, EventArgs e)
        {
            Form temp = new RAW_Sensor();
//            ThemeManager.ApplyThemeTo(temp);
            temp.Show();
        }

        private void BUT_resumemis_Click(object sender, EventArgs e)
        {
            if (
                Common.MessageShowAgain("Resume Mission",
                    "Warning this will reprogram your mission, arm and issue a takeoff command (copter)") !=
                DialogResult.OK)
                return;

            try
            {
                if (MainV2.comPort.BaseStream.IsOpen)
                {
                    string lastwp = MainV2.comPort.MAV.cs.lastautowp.ToString();
                    if (lastwp == "-1")
                        lastwp = "1";

                    if (InputBox.Show("Resume at", "Resume mission at waypoint#", ref lastwp) == DialogResult.OK)
                    {
                        int timeout = 0;
                        int lastwpno = int.Parse(lastwp);

                        // scan and check wp's we are skipping
                        // get our target wp
                        var lastwpdata = MainV2.comPort.getWP((ushort)lastwpno);

                        // get all
                        List<Locationwp> cmds = new List<Locationwp>();

                        var wpcount = MainV2.comPort.getWPCount();

                        for (ushort a = 0; a < wpcount; a++)
                        {
                            var wpdata = MainV2.comPort.getWP(a);

                            if (a < lastwpno && a != 0) // allow home
                            {
                                if (wpdata.id != (ushort)MAVLink.MAV_CMD.TAKEOFF)
                                    if (wpdata.id < (ushort)MAVLink.MAV_CMD.LAST)
                                        continue;

                                if (wpdata.id > (ushort)MAVLink.MAV_CMD.DO_LAST)
                                    continue;
                            }

                            cmds.Add(wpdata);
                        }

                        ushort wpno = 0;
                        // upload from wp 0 to end
                        MainV2.comPort.setWPTotal((ushort)(cmds.Count));

                        // add our do commands
                        foreach (var loc in cmds)
                        {
                            MAVLink.MAV_MISSION_RESULT ans = MainV2.comPort.setWP(loc, wpno,
                                (MAVLink.MAV_FRAME)(loc.frame));
                            if (ans != MAVLink.MAV_MISSION_RESULT.MAV_MISSION_ACCEPTED)
                            {
                                CustomMessageBox.Show("Upload wps failed " +
                                                      Enum.Parse(typeof(MAVLink.MAV_CMD), loc.id.ToString()) + " " +
                                                      Enum.Parse(typeof(MAVLink.MAV_MISSION_RESULT), ans.ToString()));
                                return;
                            }
                            wpno++;
                        }

                        MainV2.comPort.setWPACK();

                        FlightPlanner.instance.BUT_read_Click(this, null);

                        // set index back to 1
                        MainV2.comPort.setWPCurrent(MainV2.comPort.MAV.sysid, MainV2.comPort.MAV.compid, 1);

                        if (MainV2.comPort.MAV.cs.firmware == Firmwares.ArduCopter2)
                        {
                            while (MainV2.comPort.MAV.cs.mode.ToLower() != "Guided".ToLower())
                            {
                                MainV2.comPort.setMode("GUIDED");
                                Thread.Sleep(1000);
                                Application.DoEvents();
                                timeout++;

                                if (timeout > 30)
                                {
                                    CustomMessageBox.Show(Strings.ErrorNoResponce, Strings.ERROR);
                                    return;
                                }
                            }

                            timeout = 0;
                            while (!MainV2.comPort.MAV.cs.armed)
                            {
                                MainV2.comPort.doARM(true);
                                Thread.Sleep(1000);
                                Application.DoEvents();
                                timeout++;

                                if (timeout > 30)
                                {
                                    CustomMessageBox.Show(Strings.ErrorNoResponce, Strings.ERROR);
                                    return;
                                }
                            }

                            timeout = 0;
                            while (MainV2.comPort.MAV.cs.alt < (lastwpdata.alt - 2))
                            {
                                MainV2.comPort.doCommand(MAVLink.MAV_CMD.TAKEOFF, 0, 0, 0, 0, 0, 0, lastwpdata.alt);
                                Thread.Sleep(1000);
                                Application.DoEvents();
                                timeout++;

                                if (timeout > 40)
                                {
                                    CustomMessageBox.Show(Strings.ErrorNoResponce, Strings.ERROR);
                                    return;
                                }
                            }
                        }

                        timeout = 0;
                        while (MainV2.comPort.MAV.cs.mode.ToLower() != "AUTO".ToLower())
                        {
                            MainV2.comPort.setMode("AUTO");
                            Thread.Sleep(1000);
                            Application.DoEvents();
                            timeout++;

                            if (timeout > 30)
                            {
                                CustomMessageBox.Show(Strings.ErrorNoResponce, Strings.ERROR);
                                return;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                CustomMessageBox.Show(Strings.CommandFailed + "\n" + ex.ToString(), Strings.ERROR);
            }
        }

        private void BUT_setwp_Click(object sender, EventArgs e)
        {
            try
            {
                ((Control)sender).Enabled = false;
                MainV2.comPort.setWPCurrent(MainV2.comPort.MAV.sysid, MainV2.comPort.MAV.compid,
                    (ushort)CMB_setwp.SelectedIndex); // set nav to
            }
            catch
            {
                CustomMessageBox.Show(Strings.CommandFailed, Strings.ERROR);
            }
            ((Control)sender).Enabled = true;
        }

        private void BUT_speed1_Click(object sender, EventArgs e)
        {
            LogPlayBackSpeed = double.Parse(((MyButton)sender).Tag.ToString(), CultureInfo.InvariantCulture);
            //lbl_playbackspeed.Text = "x " + LogPlayBackSpeed;
        }

        private void BUTrestartmission_Click(object sender, EventArgs e)
        {
            try
            {
                ((Control)sender).Enabled = false;

                MainV2.comPort.setWPCurrent(MainV2.comPort.MAV.sysid, MainV2.comPort.MAV.compid, 0); // set nav to
            }
            catch
            {
                CustomMessageBox.Show(Strings.CommandFailed, Strings.ERROR);
            }
            ((Control)sender).Enabled = true;
        }

        void cam_camimage(Image camimage)
        {
            hud1.bgimage = camimage;
        }

        private void CB_tuning_CheckedChanged(object sender, EventArgs e)
        {
            if (CB_tuning.Checked)
            {
                splitContainer1.Panel1Collapsed = false;
                ZedGraphTimer.Enabled = true;
                ZedGraphTimer.Start();
                zg1.Visible = true;
                zg1.Refresh();
            }
            else
            {
                splitContainer1.Panel1Collapsed = true;
                ZedGraphTimer.Enabled = false;
                ZedGraphTimer.Stop();
                zg1.Visible = false;
            }
        }

        private void CheckAndBindPreFlightData()
        {
            //this.Invoke((Action) delegate { preFlightChecklist1.BindData(); });
        }

        private void CHK_autopan_CheckedChanged(object sender, EventArgs e)
        {
            Settings.Instance["CHK_autopan"] = CHK_autopan.Checked.ToString();

            //GCSViews.FlightPlanner.instance.autopan = CHK_autopan.Checked;
        }

        void chk_box_CheckedChanged(object sender, EventArgs e)
        {
//            ThemeManager.ApplyThemeTo((Control)sender);

            if (((CheckBox)sender).Checked)
            {
                ((CheckBox)sender).BackColor = Color.Green;

                if (list1item == null)
                {
                    if (setupPropertyInfo(ref list1item, ((CheckBox)sender).Name, MainV2.comPort.MAV.cs))
                    {
                        list1.Clear();
                        list1curve = zg1.GraphPane.AddCurve(((CheckBox)sender).Name, list1, Color.Red, SymbolType.None);
                    }
                }
                else if (list2item == null)
                {
                    if (setupPropertyInfo(ref list2item, ((CheckBox)sender).Name, MainV2.comPort.MAV.cs))
                    {
                        list2.Clear();
                        list2curve = zg1.GraphPane.AddCurve(((CheckBox)sender).Name, list2, Color.Blue, SymbolType.None);
                    }
                }
                else if (list3item == null)
                {
                    if (setupPropertyInfo(ref list3item, ((CheckBox)sender).Name, MainV2.comPort.MAV.cs))
                    {
                        list3.Clear();
                        list3curve = zg1.GraphPane.AddCurve(((CheckBox)sender).Name, list3, Color.Green,
                            SymbolType.None);
                    }
                }
                else if (list4item == null)
                {
                    if (setupPropertyInfo(ref list4item, ((CheckBox)sender).Name, MainV2.comPort.MAV.cs))
                    {
                        list4.Clear();
                        list4curve = zg1.GraphPane.AddCurve(((CheckBox)sender).Name, list4, Color.Orange,
                            SymbolType.None);
                    }
                }
                else if (list5item == null)
                {
                    if (setupPropertyInfo(ref list5item, ((CheckBox)sender).Name, MainV2.comPort.MAV.cs))
                    {
                        list5.Clear();
                        list5curve = zg1.GraphPane.AddCurve(((CheckBox)sender).Name, list5, Color.Yellow,
                            SymbolType.None);
                    }
                }
                else if (list6item == null)
                {
                    if (setupPropertyInfo(ref list6item, ((CheckBox)sender).Name, MainV2.comPort.MAV.cs))
                    {
                        list6.Clear();
                        list6curve = zg1.GraphPane.AddCurve(((CheckBox)sender).Name, list6, Color.Magenta,
                            SymbolType.None);
                    }
                }
                else if (list7item == null)
                {
                    if (setupPropertyInfo(ref list7item, ((CheckBox)sender).Name, MainV2.comPort.MAV.cs))
                    {
                        list7.Clear();
                        list7curve = zg1.GraphPane.AddCurve(((CheckBox)sender).Name, list7, Color.Purple,
                            SymbolType.None);
                    }
                }
                else if (list8item == null)
                {
                    if (setupPropertyInfo(ref list8item, ((CheckBox)sender).Name, MainV2.comPort.MAV.cs))
                    {
                        list8.Clear();
                        list8curve = zg1.GraphPane.AddCurve(((CheckBox)sender).Name, list8, Color.LimeGreen,
                            SymbolType.None);
                    }
                }
                else if (list9item == null)
                {
                    if (setupPropertyInfo(ref list9item, ((CheckBox)sender).Name, MainV2.comPort.MAV.cs))
                    {
                        list9.Clear();
                        list9curve = zg1.GraphPane.AddCurve(((CheckBox)sender).Name, list9, Color.Cyan, SymbolType.None);
                    }
                }
                else if (list10item == null)
                {
                    if (setupPropertyInfo(ref list10item, ((CheckBox)sender).Name, MainV2.comPort.MAV.cs))
                    {
                        list10.Clear();
                        list10curve = zg1.GraphPane.AddCurve(((CheckBox)sender).Name, list10, Color.Violet,
                            SymbolType.None);
                    }
                }
                else
                {
                    CustomMessageBox.Show("Max 10 at a time.");
                    ((CheckBox)sender).Checked = false;
                }

                string selected = "";
                try
                {
                    foreach (var curve in zg1.GraphPane.CurveList)
                    {
                        selected = selected + curve.Label.Text + "|";
                    }
                }
                catch
                {
                }
                Settings.Instance["Tuning_Graph_Selected"] = selected;
            }
            else
            {
                ((CheckBox)sender).BackColor = Color.Transparent;

                // reset old stuff
                if (list1item != null && list1item.Name == ((CheckBox)sender).Name)
                {
                    list1item = null;
                    zg1.GraphPane.CurveList.Remove(list1curve);
                }
                if (list2item != null && list2item.Name == ((CheckBox)sender).Name)
                {
                    list2item = null;
                    zg1.GraphPane.CurveList.Remove(list2curve);
                }
                if (list3item != null && list3item.Name == ((CheckBox)sender).Name)
                {
                    list3item = null;
                    zg1.GraphPane.CurveList.Remove(list3curve);
                }
                if (list4item != null && list4item.Name == ((CheckBox)sender).Name)
                {
                    list4item = null;
                    zg1.GraphPane.CurveList.Remove(list4curve);
                }
                if (list5item != null && list5item.Name == ((CheckBox)sender).Name)
                {
                    list5item = null;
                    zg1.GraphPane.CurveList.Remove(list5curve);
                }
                if (list6item != null && list6item.Name == ((CheckBox)sender).Name)
                {
                    list6item = null;
                    zg1.GraphPane.CurveList.Remove(list6curve);
                }
                if (list7item != null && list7item.Name == ((CheckBox)sender).Name)
                {
                    list7item = null;
                    zg1.GraphPane.CurveList.Remove(list7curve);
                }
                if (list8item != null && list8item.Name == ((CheckBox)sender).Name)
                {
                    list8item = null;
                    zg1.GraphPane.CurveList.Remove(list8curve);
                }
                if (list9item != null && list9item.Name == ((CheckBox)sender).Name)
                {
                    list9item = null;
                    zg1.GraphPane.CurveList.Remove(list9curve);
                }
                if (list10item != null && list10item.Name == ((CheckBox)sender).Name)
                {
                    list10item = null;
                    zg1.GraphPane.CurveList.Remove(list10curve);
                }
            }
        }

        void chk_box_hud_UserItem_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox checkbox = (CheckBox)sender;

            if (checkbox.Checked)
            {
                checkbox.BackColor = Color.Green;

                HUD.Custom cust = new HUD.Custom();
                HUD.Custom.src = MainV2.comPort.MAV.cs;

                string prefix = checkbox.Name + ": ";
                if (Settings.Instance["hud1_useritem_" + checkbox.Name] != null)
                    prefix = Settings.Instance["hud1_useritem_" + checkbox.Name];

                if (DialogResult.Cancel == InputBox.Show("Header", "Please enter your item prefix", ref prefix))
                {
                    checkbox.Checked = false;
                    return;
                }

                Settings.Instance["hud1_useritem_" + checkbox.Name] = prefix;

                cust.Header = prefix;

                addHudUserItem(ref cust, checkbox.Name);
            }
            else
            {
                checkbox.BackColor = Color.Transparent;

                if (hud1.CustomItems.ContainsKey(checkbox.Name))
                    hud1.CustomItems.Remove(checkbox.Name);

                Settings.Instance.Remove("hud1_useritem_" + checkbox.Name);
                hud1.Invalidate();
            }
        }

        void chk_log_CheckedChanged(object sender, EventArgs e)
        {
            if (((CheckBox)sender).Checked)
            {
                zg1.GraphPane.YAxis.Type = AxisType.Log;
            }
            else
            {
                zg1.GraphPane.YAxis.Type = AxisType.Linear;
            }
        }

        private void CMB_setwp_Click(object sender, EventArgs e)
        {
            CMB_setwp.Items.Clear();

            CMB_setwp.Items.Add("0 (Home)");

            if (MainV2.comPort.MAV.param["CMD_TOTAL"] != null)
            {
                int wps = int.Parse(MainV2.comPort.MAV.param["CMD_TOTAL"].ToString());
                for (int z = 1; z <= wps; z++)
                {
                    CMB_setwp.Items.Add(z.ToString());
                }
                return;
            }

            if (MainV2.comPort.MAV.param["WP_TOTAL"] != null)
            {
                int wps = int.Parse(MainV2.comPort.MAV.param["WP_TOTAL"].ToString());
                for (int z = 1; z <= wps; z++)
                {
                    CMB_setwp.Items.Add(z.ToString());
                }
                return;
            }

            if (MainV2.comPort.MAV.param["MIS_TOTAL"] != null)
            {
                int wps = int.Parse(MainV2.comPort.MAV.param["MIS_TOTAL"].ToString());
                for (int z = 1; z <= wps; z++)
                {
                    CMB_setwp.Items.Add(z.ToString());
                }
                return;
            }

            if (MainV2.comPort.MAV.wps.Count > 0)
            {
                int wps = MainV2.comPort.MAV.wps.Count;
                for (int z = 1; z <= wps; z++)
                {
                    CMB_setwp.Items.Add(z.ToString());
                }
                return;
            }
        }

        private void deleteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (CurrentGMapMarker == null || !(CurrentGMapMarker is GMapMarkerPOI))
                return;

            POI.POIDelete((GMapMarkerPOI)CurrentGMapMarker);
        }
        //void dropout_FormClosed(object sender, FormClosedEventArgs e)
        //{
        //    //GetFormFromGuid(GetOrCreateGuid("fd_hud_guid")).Controls.Add(hud1);
        //    SubMainLeft.Panel1.Controls.Add(hud1);
        //    SubMainLeft.Panel1Collapsed = false;
        //    huddropout = false;
        //}

        //void dropout_Resize(object sender, EventArgs e)
        //{
        //    if (huddropoutresize)
        //        return;

        //    huddropoutresize = true;

        //    int hudh = hud1.Height;
        //    int formh = ((Form)sender).Height - 30;

        //    if (((Form)sender).Height < hudh)
        //    {
        //        if (((Form)sender).WindowState == FormWindowState.Maximized)
        //        {
        //            Point tl = ((Form)sender).DesktopLocation;
        //            ((Form)sender).WindowState = FormWindowState.Normal;
        //            ((Form)sender).Location = tl;
        //        }
        //        ((Form)sender).Width = (int)(formh * (hud1.SixteenXNine ? 1.777f : 1.333f));
        //        ((Form)sender).Height = formh + 20;
        //    }
        //    hud1.Refresh();
        //    huddropoutresize = false;
        //}

        private void dropOutToolStripMenuItem_Click(object sender, EventArgs e)
        {
        }

        private void FlightData_FormClosing(object sender, FormClosingEventArgs e)
        {
            threadrun = false;

            DateTime end = DateTime.Now.AddSeconds(5);

            while (thisthread.IsAlive && DateTime.Now < end)
            {
                Application.DoEvents();
            }

            // you cannot call join on the main thread, and invoke on the thread. as it just hangs on the invoke.

            //thisthread.Join();
        }

        private void FlightData_Load(object sender, EventArgs e)
        {
            POI.POIModified += POI_POIModified;

            tfr.GotTFRs += tfr_GotTFRs;

            if (!Settings.Instance.ContainsKey("ShowNoFly") || Settings.Instance.GetBoolean("ShowNoFly"))
                NoFly.NoFly.NoFlyEvent += NoFly_NoFlyEvent;

            TRK_zoom.Minimum = gMapControl1.MapProvider.MinZoom;
            TRK_zoom.Maximum = 24;
            TRK_zoom.Value = (float)gMapControl1.Zoom;

            gMapControl1.EmptyTileColor = Color.Gray;

            Zoomlevel.Minimum = gMapControl1.MapProvider.MinZoom;
            Zoomlevel.Maximum = 24;
            Zoomlevel.Value = Convert.ToDecimal(gMapControl1.Zoom);

            if (Settings.Instance["CHK_autopan"] != null)
                CHK_autopan.Checked = Settings.Instance.GetBoolean("CHK_autopan");


            hud1.doResize();

//            prop = new Propagation(gMapControl1);

            thisthread = new Thread(mainloop);
            thisthread.Name = "FD Mainloop";
            thisthread.IsBackground = true;
            thisthread.Start();



        }

        private void FlightData_ParentChanged(object sender, EventArgs e)
        {
            if (MainV2.cam != null)
            {
                MainV2.cam.camimage += cam_camimage;
            }

            
        }

        private void FlightData_Resize(object sender, EventArgs e)
        {
            //Gspeed;
            //Galt;
            //Gheading;
            //attitudeIndicatorInstrumentControl1;
        }

        private void flightPlannerToolStripMenuItem_Click(object sender, EventArgs e)
        {
            foreach (Control ctl in splitContainer1.Panel2.Controls)
            {
                ctl.Visible = false;
            }

            foreach (MainSwitcher.Screen sc in MainV2.View.screens)
            {
                if (sc.Name == "FlightPlanner")
                {
                    MyButton but = new MyButton
                    {
                        Location = new Point(splitContainer1.Panel2.Width / 2, 0),
                        Text = "Close"
                    };
                    but.Click += but_Click;

                    splitContainer1.Panel2.Controls.Add(but);
                    splitContainer1.Panel2.Controls.Add(sc.Control);
//                    ThemeManager.ApplyThemeTo(sc.Control);
//                    ThemeManager.ApplyThemeTo(this);

                    sc.Control.Dock = DockStyle.Fill;
                    sc.Control.Visible = true;

                    if (sc.Control is IActivate)
                    {
                        ((IActivate)(sc.Control)).Activate();
                    }

                    but.BringToFront();
                    break;
                }
            }
        }

        private void flyToHereAltToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string alt = "100";

            if (MainV2.comPort.MAV.cs.firmware == Firmwares.ArduCopter2)
            {
                alt = (10 * CurrentState.multiplieralt).ToString("0");
            }
            else
            {
                alt = (100 * CurrentState.multiplieralt).ToString("0");
            }

            if (Settings.Instance.ContainsKey("guided_alt"))
                alt = Settings.Instance["guided_alt"];

            if (DialogResult.Cancel == InputBox.Show("Enter Alt", "Enter Guided Mode Alt", ref alt))
                return;

            Settings.Instance["guided_alt"] = alt;

            int intalt = (int)(100 * CurrentState.multiplieralt);
            if (!int.TryParse(alt, out intalt))
            {
                CustomMessageBox.Show("Bad Alt");
                return;
            }

            MainV2.comPort.MAV.GuidedMode.z = intalt / CurrentState.multiplieralt;

            if (MainV2.comPort.MAV.cs.mode == "Guided")
            {
                MainV2.comPort.setGuidedModeWP(new Locationwp
                {
                    alt = MainV2.comPort.MAV.GuidedMode.z,
                    lat = MainV2.comPort.MAV.GuidedMode.x / 1e7,
                    lng = MainV2.comPort.MAV.GuidedMode.y / 1e7
                });
            }
        }

        Color GetColor()
        {
            //The mix color is set to the inverse of background color, so white background will get dark colors
            Color mix = Color.FromArgb(ThemeManager.BGColor.ToArgb() ^ 0xffffff);

            int red = random.Next(256);
            int green = random.Next(256);
            int blue = random.Next(256);

            // mix the color
            if (mix != null)
            {
                red = (red + mix.R) / 2;
                green = (green + mix.G) / 2;
                blue = (blue + mix.B) / 2;
            }

            var col = Color.FromArgb(red, green, blue);

            this.LogInfo("GetColor() " + col);

            return col;
        }

        private void gMapControl1_Click(object sender, EventArgs e)
        {
        }

        private void gMapControl1_MouseDown(object sender, MouseEventArgs e)
        {
            MouseDownStart = gMapControl1.FromLocalToLatLng(e.X, e.Y);

            if (ModifierKeys == Keys.Control)
            {
                goHereToolStripMenuItem_Click(null, null);
            }

            if (gMapControl1.IsMouseOverMarker)
            {
                if (CurrentGMapMarker is GMapMarkerADSBPlane)
                {
                    var marker = CurrentGMapMarker as GMapMarkerADSBPlane;
                    if (marker.Tag is adsb.PointLatLngAltHdg)
                    {
                        var plla = marker.Tag as adsb.PointLatLngAltHdg;
                        plla.DisplayICAO = !plla.DisplayICAO;
                    }
                }
            }
        }

        private void gMapControl1_MouseLeave(object sender, EventArgs e)
        {
            if (marker != null)
            {
                try
                {
                    if (routes.Markers.Contains(marker))
                        routes.Markers.Remove(marker);
                }
                catch
                {
                }
            }
        }

        private void gMapControl1_MouseMove(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                PointLatLng point = gMapControl1.FromLocalToLatLng(e.X, e.Y);

                double latdif = MouseDownStart.Lat - point.Lat;
                double lngdif = MouseDownStart.Lng - point.Lng;

                gMapControl1.Position = new PointLatLng(center.Position.Lat + latdif,
                    center.Position.Lng + lngdif);
            }
            else
            {
                // setup a ballon with home distance
                if (marker != null)
                {
                    if (routes.Markers.Contains(marker))
                        routes.Markers.Remove(marker);
                }

                if (Settings.Instance.GetBoolean("CHK_disttohomeflightdata") != false)
                {
                    PointLatLng point = gMapControl1.FromLocalToLatLng(e.X, e.Y);

                    marker = new GMapMarkerRect(point);
                    marker.ToolTip = new GMapToolTip(marker);
                    marker.ToolTipMode = MarkerTooltipMode.Always;
                    marker.ToolTipText = "Dist to Home: " +
                                         ((gMapControl1.MapProvider.Projection.GetDistance(point,
                                             MainV2.comPort.MAV.cs.HomeLocation.Point()) * 1000) *
                                          CurrentState.multiplierdist).ToString("0");

                    routes.Markers.Add(marker);
                }
            }
        }

        void gMapControl1_OnMapZoomChanged()
        {
            try
            {
                // Exception System.Runtime.InteropServices.SEHException: External component has thrown an exception.
                TRK_zoom.Value = (float)gMapControl1.Zoom;
                Zoomlevel.Value = Convert.ToDecimal(gMapControl1.Zoom);

                //Actualizar el tamaño del marker de acuerdo a la escala del mapa
                UpdateTiffOverlay();
            }
            catch
            {
            }

            center.Position = gMapControl1.Position;
        }

        void gMapControl1_OnMarkerEnter(GMapMarker item)
        {
            CurrentGMapMarker = item;
        }

        void gMapControl1_OnMarkerLeave(GMapMarker item)
        {
            CurrentGMapMarker = null;
        }

        private void gMapControl1_OnPositionChanged(PointLatLng point)
        {
            center.Position = point;

            UpdateOverlayVisibility();
        }

        private void gMapControl1_Resize(object sender, EventArgs e)
        {
            gMapControl1.Zoom = gMapControl1.Zoom + 0.01;
        }

        private void goHereToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!MainV2.comPort.BaseStream.IsOpen)
            {
                CustomMessageBox.Show(Strings.PleaseConnect, Strings.ERROR);
                return;
            }

            if (MainV2.comPort.MAV.GuidedMode.z == 0)
            {
                //Para evitar que pregunte altitud en el comando GoHere
                //flyToHereAltToolStripMenuItem_Click(null, null);
                MainV2.comPort.MAV.GuidedMode.z = 100 / CurrentState.multiplieralt;

                if (MainV2.comPort.MAV.GuidedMode.z == 0)
                    return;
            }

            if (MouseDownStart.Lat == 0 || MouseDownStart.Lng == 0)
            {
                CustomMessageBox.Show(Strings.BadCoords, Strings.ERROR);
                return;
            }

            Locationwp gotohere = new Locationwp();

            gotohere.id = (ushort)MAVLink.MAV_CMD.WAYPOINT;
            gotohere.alt = MainV2.comPort.MAV.GuidedMode.z; // back to m
            gotohere.lat = (MouseDownStart.Lat);
            gotohere.lng = (MouseDownStart.Lng);

            try
            {
                MainV2.comPort.setGuidedModeWP(gotohere);
            }
            catch (Exception ex)
            {
                CustomMessageBox.Show(Strings.CommandFailed + ex.Message, Strings.ERROR);
            }
        }

        private void hud1_DoubleClick(object sender, EventArgs e)
        {
            //if (huddropout)
            //    return;

            //SubMainLeft.Panel1Collapsed = true;
            //Form dropout = new Form();
            //dropout.Size = new Size(hud1.Width, hud1.Height + 20);
            //SubMainLeft.Panel1.Controls.Remove(hud1);
            //dropout.Controls.Add(hud1);
            //dropout.Resize += dropout_Resize;
            //dropout.FormClosed += dropout_FormClosed;
            //dropout.Show();
            //huddropout = true;
        }

        private void hud1_ekfclick(object sender, EventArgs e)
        {
            EKFStatus frm = new EKFStatus();
            frm.TopMost = true;
            frm.Show();
        }

        private void hud1_vibeclick(object sender, EventArgs e)
        {
            Vibration frm = new Vibration();
            frm.TopMost = true;
            frm.Show();
        }

        private void loadFileToolStripMenuItem_Click(object sender, EventArgs e)
        {
            POI.POILoad();
        }

        private void mainloop()
        {
            threadrun = true;
            EndPoint Remote = new IPEndPoint(IPAddress.Any, 0);

            DateTime tracklast = DateTime.Now.AddSeconds(0);

            DateTime tunning = DateTime.Now.AddSeconds(0);

            //DateTime depthTime = DateTime.Now.AddSeconds(0);

            DateTime mapupdate = DateTime.Now.AddSeconds(0);

            DateTime vidrec = DateTime.Now.AddSeconds(0);

            DateTime waypoints = DateTime.Now.AddSeconds(0);

            DateTime updatescreen = DateTime.Now;

            DateTime tsreal = DateTime.Now;
            double taketime = 0;
            double timeerror = 0;

            //Inicializar el filtro de speed y de distRemain
            for (int i = 0; i < 30; i++)
            {
                speedMedianFilter.ProcessSample(1.0);
                distRemainMedianFilter.ProcessSample(5);
            }

            while (!IsHandleCreated)
                Thread.Sleep(1000);

            while (threadrun)
            {
                if (MainV2.comPort.giveComport)
                {
                    Thread.Sleep(50);
                    updateBindingSource();
                    continue;
                }

                if (!MainV2.comPort.logreadmode)
                    Thread.Sleep(50); // max is only ever 10 hz but we go a little faster to empty the serial queue

                if (this.IsDisposed)
                {
                    threadrun = false;
                    break;
                }

                try
                {
                    if (aviwriter != null && vidrec.AddMilliseconds(1000 / 25.0) <= DateTime.Now)
                    {
                        vidrec = DateTime.Now;

                        hud1.streamjpgenable = true;

                        //aviwriter.avi_start("test.avi");
                        // add a frame
                        aviwriter.avi_add(hud1.streamjpg.ToArray(), (uint)hud1.streamjpg.Length);
                        // write header - so even partial files will play
                        aviwriter.avi_end(hud1.Width, hud1.Height, 25);
                    }
                }
                catch
                {
                    log.Error("Failed to write avi");
                }

                // log playback
                if (MainV2.comPort.logreadmode && MainV2.comPort.logplaybackfile != null)
                {
                    if (MainV2.comPort.BaseStream.IsOpen)
                    {
                        MainV2.comPort.logreadmode = false;
                        try
                        {
                            MainV2.comPort.logplaybackfile.Close();
                        }
                        catch
                        {
                            log.Error("Failed to close logfile");
                        }
                        MainV2.comPort.logplaybackfile = null;
                    }


                    //Console.WriteLine(DateTime.Now.Millisecond);

                    if (updatescreen.AddMilliseconds(300) < DateTime.Now)
                    {
                        try
                        {
                            updatePlayPauseButton(true);
                            updateLogPlayPosition();
                        }
                        catch
                        {
                            log.Error("Failed to update log playback pos");
                        }
                        updatescreen = DateTime.Now;
                    }

                    //Console.WriteLine(DateTime.Now.Millisecond + " done ");

                    DateTime logplayback = MainV2.comPort.lastlogread;
                    try
                    {
                        if (!MainV2.comPort.giveComport)
                            MainV2.comPort.readPacket();

                        // update currentstate of sysids on the port
                        foreach (var MAV in MainV2.comPort.MAVlist)
                        {
                            try
                            {
                                MAV.cs.UpdateCurrentSettings(null, false, MainV2.comPort, MAV);
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex);
                            }
                        }
                    }
                    catch
                    {
                        log.Error("Failed to read log packet");
                    }

                    double act = (MainV2.comPort.lastlogread - logplayback).TotalMilliseconds;

                    if (act > 9999 || act < 0)
                        act = 0;

                    double ts = 0;
                    if (LogPlayBackSpeed == 0)
                        LogPlayBackSpeed = 0.01;
                    try
                    {
                        ts = Math.Min((act / LogPlayBackSpeed), 1000);
                    }
                    catch
                    {
                    }

                    if (LogPlayBackSpeed >= 4 && MainV2.speechEnable)
                        MainV2.speechEngine.SpeakAsyncCancelAll();

                    double timetook = (DateTime.Now - tsreal).TotalMilliseconds;
                    if (timetook != 0)
                    {
                        //Console.WriteLine("took: " + timetook + "=" + taketime + " " + (taketime - timetook) + " " + ts);
                        //Console.WriteLine(MainV2.comPort.lastlogread.Second + " " + DateTime.Now.Second + " " + (MainV2.comPort.lastlogread.Second - DateTime.Now.Second));
                        //if ((taketime - timetook) < 0)
                        {
                            timeerror += (taketime - timetook);
                            if (ts != 0)
                            {
                                ts += timeerror;
                                timeerror = 0;
                            }
                        }
                        if (Math.Abs(ts) > 1000)
                            ts = 1000;
                    }

                    taketime = ts;
                    tsreal = DateTime.Now;

                    if (ts > 0 && ts < 1000)
                        Thread.Sleep((int)ts);

                    tracklast = tracklast.AddMilliseconds(ts - act);
                    tunning = tunning.AddMilliseconds(ts - act);

                    if (tracklast.Month != DateTime.Now.Month)
                    {
                        tracklast = DateTime.Now;
                        tunning = DateTime.Now;
                    }

                    try
                    {
                        if (MainV2.comPort.logplaybackfile != null &&
                            MainV2.comPort.logplaybackfile.BaseStream.Position ==
                            MainV2.comPort.logplaybackfile.BaseStream.Length)
                        {
                            MainV2.comPort.logreadmode = false;
                        }
                    }
                    catch
                    {
                        MainV2.comPort.logreadmode = false;
                    }
                }
                else
                {
                    // ensure we know to stop
                    if (MainV2.comPort.logreadmode)
                        MainV2.comPort.logreadmode = false;
                    updatePlayPauseButton(false);

                    if (!playingLog && MainV2.comPort.logplaybackfile != null)
                    {
                        continue;
                    }
                }

                try
                {
                    CheckAndBindPreFlightData();
                    //Console.WriteLine(DateTime.Now.Millisecond);
                    //int fixme;
                    updateBindingSource();
                    // Console.WriteLine(DateTime.Now.Millisecond + " done ");

                    // battery warning.
                    //float warnvolt = Settings.Instance.GetFloat("speechbatteryvolt");
                    //float warnpercent = Settings.Instance.GetFloat("speechbatterypercent");

                    //if (MainV2.comPort.MAV.cs.battery_voltage <= warnvolt)
                    //{
                    //    hud1.lowvoltagealert = true;
                    //}
                    //else if ((MainV2.comPort.MAV.cs.battery_remaining) < warnpercent)
                    //{
                    //    hud1.lowvoltagealert = true;
                    //}
                    //else
                    //{
                    //    hud1.lowvoltagealert = false;
                    //}

                    // update opengltest
                    if (OpenGLtest.instance != null)
                    {
                        OpenGLtest.instance.rpy = new OpenTK.Vector3(MainV2.comPort.MAV.cs.roll, MainV2.comPort.MAV.cs.pitch,
                            MainV2.comPort.MAV.cs.yaw);
                        OpenGLtest.instance.LocationCenter = new PointLatLngAlt(MainV2.comPort.MAV.cs.lat,
                            MainV2.comPort.MAV.cs.lng, MainV2.comPort.MAV.cs.altasl / CurrentState.multiplieralt, "here");
                    }

                    // update opengltest2
                    if (OpenGLtest2.instance != null)
                    {
                        OpenGLtest2.instance.rpy = new OpenTK.Vector3(MainV2.comPort.MAV.cs.roll, MainV2.comPort.MAV.cs.pitch,
                            MainV2.comPort.MAV.cs.yaw);
                        OpenGLtest2.instance.LocationCenter = new PointLatLngAlt(MainV2.comPort.MAV.cs.lat,
                            MainV2.comPort.MAV.cs.lng, MainV2.comPort.MAV.cs.altasl / CurrentState.multiplieralt, "here");
                        OpenGLtest2.instance.WPs = MainV2.comPort.MAV.wps.Values.Select(a => (Locationwp)a).ToList();
                    }

                    // update vario info
                    Vario.SetValue(MainV2.comPort.MAV.cs.climbrate);

                    // udpate tunning tab
                    if (tunning.AddMilliseconds(50) < DateTime.Now && CB_tuning.Checked)
                    {
                        double time = (Environment.TickCount - tickStart) / 1000.0;
                        if (list1item != null)
                            list1.Add(time, (list1item.GetValue(MainV2.comPort.MAV.cs, null).ConvertToDouble()));
                        if (list2item != null)
                            list2.Add(time, (list2item.GetValue(MainV2.comPort.MAV.cs, null).ConvertToDouble()));
                        if (list3item != null)
                            list3.Add(time, (list3item.GetValue(MainV2.comPort.MAV.cs, null).ConvertToDouble()));
                        if (list4item != null)
                            list4.Add(time, (list4item.GetValue(MainV2.comPort.MAV.cs, null).ConvertToDouble()));
                        if (list5item != null)
                            list5.Add(time, (list5item.GetValue(MainV2.comPort.MAV.cs, null).ConvertToDouble()));
                        if (list6item != null)
                            list6.Add(time, (list6item.GetValue(MainV2.comPort.MAV.cs, null).ConvertToDouble()));
                        if (list7item != null)
                            list7.Add(time, (list7item.GetValue(MainV2.comPort.MAV.cs, null).ConvertToDouble()));
                        if (list8item != null)
                            list8.Add(time, (list8item.GetValue(MainV2.comPort.MAV.cs, null).ConvertToDouble()));
                        if (list9item != null)
                            list9.Add(time, (list9item.GetValue(MainV2.comPort.MAV.cs, null).ConvertToDouble()));
                        if (list10item != null)
                            list10.Add(time, (list10item.GetValue(MainV2.comPort.MAV.cs, null).ConvertToDouble()));
                    }

                    //Actualizar el Grafico de profundidad
                    //if (depthTime.AddMilliseconds(250) < DateTime.Now)
                    //{
                    //    if (MainV2.comPort.MAVlist.Contains(200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL))
                    //    {
                    //        double time = (Environment.TickCount - tickStart) / 1000.0;
                    //        double depth = -(double)MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.rangefinder1 / 100.0;
                    //        depth = depthChartFilter.ProcessSample(depth);

                    //        //For test only
                    //        //double depth = -(double)MainV2.comPort.MAV.cs.lat;

                    //        depthRollingList.Add(time, depth);
                    //    }

                    //    depthTime = DateTime.Now.AddMilliseconds(250);
                    //}

                    // update map
                    if (tracklast.AddSeconds(Settings.Instance.GetDouble("FD_MapUpdateDelay", 1.2)) < DateTime.Now)
                    {
                        // show disable joystick button
                        if (MainV2.joystick != null && MainV2.joystick.enabled)
                        {
                            this.Invoke((MethodInvoker)delegate
                            {
                                but_disablejoystick.Visible = true;
                            });
                        }

                        adsb.CurrentPosition = MainV2.comPort.MAV.cs.HomeLocation;

                        // show proximity screen
                        if (MainV2.comPort.MAV?.Proximity != null && MainV2.comPort.MAV.Proximity.DataAvailable)
                        {
                            //this.BeginInvoke((MethodInvoker)delegate { new ProximityControl(MainV2.comPort.MAV).Show(); });
                        }

                        if (Settings.Instance.GetBoolean("CHK_maprotation"))
                        {
                            // dont holdinvalidation here
                            setMapBearing();
                        }

                        if (route == null)
                        {
                            route = new GMapRoute(trackPoints, "track");
                            routes.Routes.Add(route);
                        }

                        PointLatLng currentloc = new PointLatLng(MainV2.comPort.MAV.cs.lat, MainV2.comPort.MAV.cs.lng);

                        gMapControl1.HoldInvalidation = true;

                        int numTrackLength = Settings.Instance.GetInt32("NUM_tracklength", 200);
                        // maintain route history length
                        if (route.Points.Count > numTrackLength)
                        {
                            route.Points.RemoveRange(0,
                                route.Points.Count - numTrackLength);
                        }
                        // add new route point
                        if (MainV2.comPort.MAV.cs.lat != 0 && MainV2.comPort.MAV.cs.lng != 0)
                        {
                            route.Points.Add(currentloc);
                        }

                        if (!this.IsHandleCreated)
                            continue;

                        updateRoutePosition();

                        // update programed wp course
                        if (waypoints.AddSeconds(5) < DateTime.Now)
                        {
                            //Console.WriteLine("Doing FD WP's");
                            updateClearMissionRouteMarkers();

                            var wps = MainV2.comPort.MAV.wps.Values.ToList();
                            if (wps.Count >= 1)
                            {
                                var homeplla = new PointLatLngAlt(MainV2.comPort.MAV.cs.HomeLocation.Lat,
                                    MainV2.comPort.MAV.cs.HomeLocation.Lng,
                                    MainV2.comPort.MAV.cs.HomeLocation.Alt / CurrentState.multiplieralt, "H");

                                var overlay = new WPOverlay();

                                {
                                    List<Locationwp> mission_items;
                                    mission_items = MainV2.comPort.MAV.wps.Values.Select(a => (Locationwp)a).ToList();
                                    mission_items.RemoveAt(0);

                                    if (wps.Count == 1)
                                    {
                                        overlay.CreateOverlay(homeplla,
                                            mission_items,
                                            0 / CurrentState.multiplieralt, 0 / CurrentState.multiplieralt,
                                            CurrentState.multiplieralt);
                                    }
                                    else
                                    {
                                        overlay.CreateOverlay(homeplla,
                                            mission_items,
                                            0 / CurrentState.multiplieralt, 0 / CurrentState.multiplieralt,
                                            CurrentState.multiplieralt);

                                    }
                                }

                                var existing = gMapControl1.Overlays.Where(a => a.Id == overlay.overlay.Id).ToList();
                                foreach (var b in existing)
                                {
                                    gMapControl1.Overlays.Remove(b);
                                }

                                gMapControl1.Overlays.Insert(1, overlay.overlay);

                                overlay.overlay.ForceUpdate();

                                distanceBar1.ClearWPDist();
                                /*
                                var i = -1;
                                var travdist = 0.0;
                                var lastplla = overlay.pointlist.First();
                                foreach (var plla in overlay.pointlist)
                                {
                                    i++;
                                    if (plla == null)
                                        continue;

                                    var dist = lastplla.GetDistance(plla);

                                    distanceBar1.AddWPDist((float)dist);

                                    if (i <= MainV2.comPort.MAV.cs.wpno)
                                    {
                                        travdist += dist;
                                    }
                                }

                                travdist -= MainV2.comPort.MAV.cs.wp_dist;
                                */

                                //Algoritmo mio para calcular la distancia de punto a punto en la mision
                                var travdist = 0.0;
                                for (int i = 0; i < overlay.pointlist.Count-1; i++)
                                {
                                    var p1 = overlay.pointlist.ElementAt(i);
                                    var p2 = overlay.pointlist.ElementAt(i+1);

                                    if (p1 == null || p2 == null)
                                        continue;

                                    var dist = p1.GetDistance(p2);
                                    distanceBar1.AddWPDist((float)dist);

                                    if (i+1 <= MainV2.comPort.MAV.cs.wpno)
                                    {
                                        travdist += dist;
                                    }
                                }
                                travdist -= MainV2.comPort.MAV.cs.wp_dist;


                                if (MainV2.comPort.MAV.cs.mode.ToUpper() == "AUTO")
                                    distanceBar1.traveleddist = (float)travdist;

                                if (distanceBar1.traveleddist < 0)
                                    distanceBar1.traveleddist = 0;


                                //Actualizar la tabla de Mission Status
                                LBL_TotalDist.Text = distanceBar1.totaldist.ToString("N0") + " m";
                                LBL_TraveledDist.Text = distanceBar1.traveleddist.ToString("N0") + " m";
                                double progress = ((double)distanceBar1.traveleddist / (double)distanceBar1.totaldist * 100.0);
                                progress = MathHelper.constrain(progress, 0, 100);
                                LBL_MissionCompleted.Text = progress.ToString("N0") + " %";

                                //El Mission Status Time Remain solo se actualiza en modo Auto
                                if (MainV2.comPort.MAV.cs.mode.ToUpper() == "AUTO")
                                {

                                    //Se debe filtrar la valocidad y la distancia para suavisar la variacion del tiempo
                                    double distRemain = distanceBar1.totaldist - distanceBar1.traveleddist; //En metros
                                    distRemain = distRemainMedianFilter.ProcessSample(distRemain);
                                    double speed = speedMedianFilter.ProcessSample(MainV2.comPort.MAV.cs.groundspeed);
                                    double timeRemain = distRemain / speed; //En segundos

                                    //Tiempo de mision restante estimado
                                    TimeSpan t = TimeSpan.FromSeconds(timeRemain);

                                    LBL_TimeRemain.Text = t.ToString(@"hh\:mm\:ss");
                                }
                                else
                                {
                                    LBL_TimeRemain.Text = "--:--:--";
                                }
                                    
                            }

                            RegeneratePolygon();

                            // update rally points

                            rallypointoverlay.Markers.Clear();

                            foreach (var mark in MainV2.comPort.MAV.rallypoints.Values)
                            {
                                rallypointoverlay.Markers.Add(new GMapMarkerRallyPt(new PointLatLngAlt(mark)));
                            }

                            geofence.Clear();

                            var fenceoverlay = new WPOverlay();
                            fenceoverlay.overlay.Id = "fence";

                            fenceoverlay.CreateOverlay(PointLatLngAlt.Zero,
                                MainV2.comPort.MAV.fencepoints.Values.Select(a => (Locationwp)a).ToList(), 0, 0,
                                CurrentState.multiplieralt);

                            var fence = mymap.Overlays.Where(a => a.Id == "fence");
                            if (fence.Count() > 0)
                                mymap.Overlays.Remove(fence.First());
                            mymap.Overlays.Add(fenceoverlay.overlay);

                            fenceoverlay.overlay.ForceUpdate();

                            // optional on Flight data
                            if (MainV2.ShowAirports)
                            {
                                // airports
                                foreach (var item in Airports.getAirports(gMapControl1.Position).ToArray())
                                {
                                    try
                                    {
                                        rallypointoverlay.Markers.Add(new GMapMarkerAirport(item)
                                        {
                                            ToolTipText = item.Tag,
                                            ToolTipMode = MarkerTooltipMode.OnMouseOver
                                        });
                                    }
                                    catch (Exception e)
                                    {
                                        log.Error(e);
                                    }
                                }
                            }
                            waypoints = DateTime.Now;
                        }

                        updateClearRoutesMarkers();

                        // add this after the mav icons are drawn
                        if (MainV2.comPort.MAV.cs.MovingBase != null && MainV2.comPort.MAV.cs.MovingBase == PointLatLngAlt.Zero)
                        {
                            addMissionRouteMarker(new GMarkerGoogle(currentloc, GMarkerGoogleType.blue_dot)
                            {
                                Position = MainV2.comPort.MAV.cs.MovingBase,
                                ToolTipText = "Moving Base",
                                ToolTipMode = MarkerTooltipMode.OnMouseOver
                            });
                        }

                        // add gimbal point center
                        try
                        {
                            if (MainV2.comPort.MAV.param.ContainsKey("MNT_STAB_TILT")
                                && MainV2.comPort.MAV.param.ContainsKey("MNT_STAB_ROLL")
                                && MainV2.comPort.MAV.param.ContainsKey("MNT_TYPE"))
                            {
                                float temp1 = (float)MainV2.comPort.MAV.param["MNT_STAB_TILT"];
                                float temp2 = (float)MainV2.comPort.MAV.param["MNT_STAB_ROLL"];

                                float temp3 = (float)MainV2.comPort.MAV.param["MNT_TYPE"];

                                if (MainV2.comPort.MAV.param.ContainsKey("MNT_STAB_PAN") &&
                                    // (float)MainV2.comPort.MAV.param["MNT_STAB_PAN"] == 1 &&
                                    ((float)MainV2.comPort.MAV.param["MNT_STAB_TILT"] == 1 &&
                                      (float)MainV2.comPort.MAV.param["MNT_STAB_ROLL"] == 0) ||
                                     (float)MainV2.comPort.MAV.param["MNT_TYPE"] == 4) // storm driver
                                {
                                    var marker = GimbalPoint.ProjectPoint(MainV2.comPort);

                                    if (marker != PointLatLngAlt.Zero)
                                    {
                                        MainV2.comPort.MAV.cs.GimbalPoint = marker;

                                        addMissionRouteMarker(new GMarkerGoogle(marker, GMarkerGoogleType.blue_dot)
                                        {
                                            ToolTipText = "Camera Target\n" + marker,
                                            ToolTipMode = MarkerTooltipMode.OnMouseOver
                                        });
                                    }
                                }
                            }


                            // cleanup old - no markers where added, so remove all old 
                            if (MainV2.comPort.MAV.camerapoints.Count < photosoverlay.Markers.Count)
                                photosoverlay.Markers.Clear();

                            var min_interval = 0.0;
                            if (MainV2.comPort.MAV.param.ContainsKey("CAM_MIN_INTERVAL"))
                                min_interval = MainV2.comPort.MAV.param["CAM_MIN_INTERVAL"].Value / 1000.0;

                            // set fov's based on last grid calc
                            if (Settings.Instance["camera_fovh"] != null)
                            {
                                GMapMarkerPhoto.hfov = Settings.Instance.GetDouble("camera_fovh");
                                GMapMarkerPhoto.vfov = Settings.Instance.GetDouble("camera_fovv");
                            }

                            // add new - populate camera_feedback to map
                            double oldtime = double.MinValue;
                            foreach (var mark in MainV2.comPort.MAV.camerapoints.ToArray())
                            {
                                var timesincelastshot = (mark.time_usec / 1000.0) / 1000.0 - oldtime;
                                MainV2.comPort.MAV.cs.timesincelastshot = timesincelastshot;
                                bool contains = photosoverlay.Markers.Any(p => p.Tag.Equals(mark.time_usec));
                                if (!contains)
                                {
                                    if (timesincelastshot < min_interval)
                                        addMissionPhotoMarker(new GMapMarkerPhoto(mark, true));
                                    else
                                        addMissionPhotoMarker(new GMapMarkerPhoto(mark, false));
                                }
                                oldtime = (mark.time_usec / 1000.0) / 1000.0;
                            }

                            var GMapMarkerOverlapCount = new GMapMarkerOverlapCount(PointLatLng.Empty);

                            // age current
                            int camcount = MainV2.comPort.MAV.camerapoints.Count;
                            int a = 0;
                            foreach (var mark in photosoverlay.Markers)
                            {
                                if (mark is GMapMarkerPhoto)
                                {
                                    if (CameraOverlap)
                                    {
                                        var marker = ((GMapMarkerPhoto)mark);
                                        // abandon roll higher than 25 degrees
                                        if (Math.Abs(marker.Roll) < 25)
                                        {
                                            GMapMarkerOverlapCount.Add(
                                                ((GMapMarkerPhoto)mark).footprintpoly);
                                        }
                                    }
                                    if (a < (camcount - 4))
                                        ((GMapMarkerPhoto)mark).drawfootprint = false;
                                }
                                a++;
                            }

                            if (CameraOverlap)
                            {
                                if (!kmlpolygons.Markers.Contains(GMapMarkerOverlapCount) &&
                                    camcount > 0)
                                {
                                    kmlpolygons.Markers.Clear();
                                    kmlpolygons.Markers.Add(GMapMarkerOverlapCount);
                                }
                            }
                            else if (kmlpolygons.Markers.Contains(GMapMarkerOverlapCount))
                            {
                                kmlpolygons.Markers.Clear();
                            }
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex);
                        }

                        lock (MainV2.instance.adsblock)
                        {
                            foreach (adsb.PointLatLngAltHdg plla in MainV2.instance.adsbPlanes.Values)
                            {
                                if (plla.Raw != null)
                                {
                                    var msg = ((MAVLink.mavlink_adsb_vehicle_t)plla.Raw);
                                    if (msg.emitter_type == 255 && ASCIIEncoding.ASCII.GetString(msg.callsign).Trim('\0') == "OA_DB")
                                    {
                                        // cm
                                        var radius = msg.squawk;

                                        addMissionRouteMarker(new GMapMarkerDistance(plla, radius / 100.0, 0)
                                        { Pen = new Pen(Color.Red, 3) });
                                        continue;
                                    }
                                }

                                // 30 seconds history
                                if (((DateTime)plla.Time) > DateTime.Now.AddSeconds(-30))
                                {
                                    var adsbplane = new GMapMarkerADSBPlane(plla, plla.Heading)
                                    {
                                        ToolTipText = "ICAO: " + plla.Tag + "\n" +
                                        "Alt: " + plla.Alt.ToString("0") + "\n" +
                                        "Speed: " + plla.Speed.ToString("0") + "\n" +
                                        "Heading: " + plla.Heading.ToString("0")
                                        ,
                                        ToolTipMode = MarkerTooltipMode.OnMouseOver,
                                        Tag = plla
                                    };

                                    if (plla.DisplayICAO)
                                        adsbplane.ToolTipMode = MarkerTooltipMode.Always;

                                    switch (plla.ThreatLevel)
                                    {
                                        case MAVLink.MAV_COLLISION_THREAT_LEVEL.NONE:
                                            adsbplane.AlertLevel = GMapMarkerADSBPlane.AlertLevelOptions.Green;
                                            break;
                                        case MAVLink.MAV_COLLISION_THREAT_LEVEL.LOW:
                                            adsbplane.AlertLevel = GMapMarkerADSBPlane.AlertLevelOptions.Orange;
                                            break;
                                        case MAVLink.MAV_COLLISION_THREAT_LEVEL.HIGH:
                                            adsbplane.AlertLevel = GMapMarkerADSBPlane.AlertLevelOptions.Red;
                                            break;
                                    }

                                    addMissionRouteMarker(adsbplane);
                                }
                            }
                        }


                        if (route.Points.Count > 0)
                        {
                            // add primary route icon

                            // draw guide mode point for only main mav
                            if (MainV2.comPort.MAV.cs.mode.ToLower() == "guided" && MainV2.comPort.MAV.GuidedMode.x != 0)
                            {
                                addpolygonmarker("Guided Mode", MainV2.comPort.MAV.GuidedMode.y / 1e7,
                                    MainV2.comPort.MAV.GuidedMode.x / 1e7, (int)MainV2.comPort.MAV.GuidedMode.z,
                                    Color.Blue,
                                    routes);
                            }

                            // draw all icons for all connected mavs
                            foreach (var port in MainV2.Comports.ToArray())
                            {
                                // draw the mavs seen on this port
                                foreach (var MAV in port.MAVlist)
                                {
                                    var marker = Common.getMAVMarker(MAV);

                                    if (marker.Position.Lat == 0 && marker.Position.Lng == 0)
                                        continue;

                                    addMissionRouteMarker(marker);
                                }
                            }

                            if (route.Points.Count == 0 || route.Points[route.Points.Count - 1].Lat != 0 &&
                                (mapupdate.AddSeconds(3) < DateTime.Now) && CHK_autopan.Checked)
                            {
                                updateMapPosition(currentloc);
                                mapupdate = DateTime.Now;
                            }

                            if (route.Points.Count == 1 && gMapControl1.Zoom == 3) // 3 is the default load zoom
                            {
                                updateMapPosition(currentloc);
                                updateMapZoom(17);
                            }
                        }

//                        prop.Update(MainV2.comPort.MAV.cs.HomeLocation, MainV2.comPort.MAV.cs.Location,
//                            MainV2.comPort.MAV.cs.battery_kmleft);

//                        prop.alt = MainV2.comPort.MAV.cs.alt;
//                        prop.altasl = MainV2.comPort.MAV.cs.altasl;
//                        prop.center = gMapControl1.Position;

                        gMapControl1.HoldInvalidation = false;

                        if (gMapControl1.Visible)
                        {
                            gMapControl1.Invalidate();
                        }

                        tracklast = DateTime.Now;
                    }
                }
                catch (Exception ex)
                {
                    log.Error(ex);
                    Tracking.AddException(ex);
                    Console.WriteLine("FD Main loop exception " + ex);
                }
            }
            Console.WriteLine("FD Main loop exit");
        }

        void mymap_Paint(object sender, PaintEventArgs e)
        {
            distanceBar1.DoPaintRemote(e);
        }

        void NoFly_NoFlyEvent(object sender, NoFly.NoFly.NoFlyEventArgs e)
        {
            Invoke((Action)delegate
           {
               foreach (var poly in e.NoFlyZones.Polygons)
               {
                   kmlpolygons.Polygons.Add(poly);
               }
           });
        }

        private void onOffCameraOverlapToolStripMenuItem_Click(object sender, EventArgs e)
        {
            CameraOverlap = onOffCameraOverlapToolStripMenuItem.Checked;
        }

        void POI_POIModified(object sender, EventArgs e)
        {
            POI.UpdateOverlay(poioverlay);
        }

        private void PointCameraCoordsToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            var location = "";
            InputBox.Show("Enter Coords", "Please enter the coords 'lat;long;alt' or 'lat;long'", ref location);

            var split = location.Split(';');

            if (split.Length == 3)
            {
                var lat = float.Parse(split[0], CultureInfo.InvariantCulture);
                var lng = float.Parse(split[1], CultureInfo.InvariantCulture);
                var alt = float.Parse(split[2], CultureInfo.InvariantCulture);

                MainV2.comPort.doCommand(MAVLink.MAV_CMD.DO_SET_ROI, 0, 0, 0, 0, lat, lng,
                    alt / CurrentState.multiplieralt);
            }
            else if (split.Length == 2)
            {
                var lat = float.Parse(split[0], CultureInfo.InvariantCulture);
                var lng = float.Parse(split[1], CultureInfo.InvariantCulture);
                var alt = srtm.getAltitude(MouseDownStart.Lat, MouseDownStart.Lng).alt / CurrentState.multiplieralt;

                MainV2.comPort.doCommand(MAVLink.MAV_CMD.DO_SET_ROI, 0, 0, 0, 0, lat, lng, (float)alt);
            }
            else
            {
                CustomMessageBox.Show(Strings.InvalidField, Strings.ERROR);
            }
        }

        private void pointCameraHereToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!MainV2.comPort.BaseStream.IsOpen)
            {
                CustomMessageBox.Show("Please Connect First");
                return;
            }

            double srtmalt = srtm.getAltitude(MouseDownStart.Lat, MouseDownStart.Lng).alt;

            string alt = (srtmalt * CurrentState.multiplieralt).ToString("0");
            if (DialogResult.Cancel == InputBox.Show("Enter Alt", "Enter Target Alt (absolute, default value is ground alt)", ref alt))
                return;

            float intalt = 0;
            if (!float.TryParse(alt, out intalt))
            {
                CustomMessageBox.Show("Bad Alt");
                return;
            }

            if (MouseDownStart.Lat == 0 || MouseDownStart.Lng == 0)
            {
                CustomMessageBox.Show("Bad Lat/Long");
                return;
            }

            try
            {
                MainV2.comPort.doCommand(MAVLink.MAV_CMD.DO_SET_ROI, 0, 0, 0, 0, (float)MouseDownStart.Lat,
                    (float)MouseDownStart.Lng, intalt / CurrentState.multiplieralt);
            }
            catch
            {
                CustomMessageBox.Show(Strings.CommandFailed, Strings.ERROR);
            }
        }

        /// <summary>
        /// used to redraw the polygon
        /// </summary>
        void RegeneratePolygon()
        {
            List<PointLatLng> polygonPoints = new List<PointLatLng>();

            if (routes == null)
                return;

            foreach (GMapMarker m in polygons.Markers)
            {
                if (m is GMapMarkerRect)
                {
                    m.Tag = polygonPoints.Count;
                    polygonPoints.Add(m.Position);
                }
            }

            if (polygonPoints.Count < 2)
                return;

            GMapRoute homeroute = new GMapRoute("homepath");
            homeroute.Stroke = new Pen(Color.Yellow, 2);
            homeroute.Stroke.DashStyle = DashStyle.Dash;
            // add first point past home
            homeroute.Points.Add(polygonPoints[1]);
            // add home location
            homeroute.Points.Add(polygonPoints[0]);
            // add last point
            homeroute.Points.Add(polygonPoints[polygonPoints.Count - 1]);

            GMapRoute wppath = new GMapRoute("wp path");
            wppath.Stroke = new Pen(Color.Yellow, 4);
            wppath.Stroke.DashStyle = DashStyle.Custom;

            for (int a = 1; a < polygonPoints.Count; a++)
            {
                wppath.Points.Add(polygonPoints[a]);
            }

            Invoke((Action)delegate
           {
               polygons.Routes.Add(homeroute);
               polygons.Routes.Add(wppath);
           });
        }

        private void resetToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Refresh();
        }

        private void russianHudToolStripMenuItem_Click(object sender, EventArgs e)
        {
            hud1.Russian = !hud1.Russian;
            Settings.Instance["russian_hud"] = hud1.Russian.ToString();
        }

        private void saveFileToolStripMenuItem_Click(object sender, EventArgs e)
        {
            POI.POISave();
        }
        private void saveTabControlActions()
        {
            string answer = "";

            foreach (TabPage tabPage in tabControlactions.TabPages)
            {
                answer += tabPage.Name + ";";
            }

            Settings.Instance["tabcontrolactions"] = answer;
        }

        private void setEKFHomeHereToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!MainV2.comPort.BaseStream.IsOpen)
                return;

            var alt = srtm.getAltitude(MouseDownStart.Lat, MouseDownStart.Lng);

            if (alt.currenttype != srtm.tiletype.valid)
            {
                CustomMessageBox.Show("No SRTM data for this area", Strings.ERROR);
                return;
            }

            MAVLink.mavlink_set_gps_global_origin_t go = new MAVLink.mavlink_set_gps_global_origin_t()
            {
                latitude = (int)(MouseDownStart.Lat * 1e7),
                longitude = (int)(MouseDownStart.Lng * 1e7),
                altitude = (int)alt.alt,
                target_system = MainV2.comPort.MAV.sysid
            };

            MainV2.comPort.sendPacket(go, MainV2.comPort.MAV.sysid, MainV2.comPort.MAV.compid);
        }

        private void setGStreamerSourceToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //string url = Settings.Instance["gstreamer_url"] != null
            //    ? Settings.Instance["gstreamer_url"]
            //    : @"rtspsrc location=rtsp://192.168.1.133:8554/video1 ! application/x-rtp ! rtpjpegdepay ! videoconvert ! video/x-raw,format=BGRA ! appsink name=outsink";

            //if (DialogResult.OK == InputBox.Show("GStreamer url", "Enter the source pipeline\nEnsure the final payload is ! videoconvert ! video/x-raw,format=BGRA ! appsink name=outsink", ref url))
            //{
            //    Settings.Instance["gstreamer_url"] = url;

            //    GStreamer.StopAll();

            //    GStreamer.LookForGstreamer();

            //    if (!File.Exists(GStreamer.gstlaunch))
            //    {
            //        GStreamerUI.DownloadGStreamer();

            //        if (!File.Exists(GStreamer.gstlaunch))
            //        {
            //            return;
            //        }
            //    }

            //    GStreamer.StartA(url);
            //}
            //else
            //{
            //    GStreamer.Stop(null);
            //}
        }

        private void setHomeHereToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void setMapBearing()
        {
            Invoke((Action)delegate { gMapControl1.Bearing = (int)((MainV2.comPort.MAV.cs.yaw + 360) % 360); });
        }

        private void setMJPEGSourceToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string url = Settings.Instance["mjpeg_url"] != null
                ? Settings.Instance["mjpeg_url"]
                : @"http://127.0.0.1:56781/map.jpg";

            if (DialogResult.OK == InputBox.Show("Mjpeg url", "Enter the url to the mjpeg source url", ref url))
            {
                Settings.Instance["mjpeg_url"] = url;

                CaptureMJPEG.Stop();

                CaptureMJPEG.URL = url;

                CaptureMJPEG.runAsync();
            }
            else
            {
                CaptureMJPEG.Stop();
            }
        }

        bool setupPropertyInfo(ref PropertyInfo input, string name, object source)
        {
            Type test = source.GetType();

            foreach (var field in test.GetProperties())
            {
                if (field.Name == name)
                {
                    input = field;
                    return true;
                }
            }

            return false;
        }

        private void startCameraToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MainV2.MONO)
                return;
            if (MainV2.cam == null)
            {
                try
                {
                    //MainV2.cam = new Capture(Settings.Instance.GetInt32("video_device"), new AMMediaType());

                    MainV2.cam.Start();

                    MainV2.cam.camimage += new CamImage(cam_camimage);
                }
                catch (Exception ex)
                {
                    CustomMessageBox.Show("Camera Fail: " + ex.ToString(), Strings.ERROR);
                }
            }
        }

        void tabControl1_DrawItem(object sender, DrawItemEventArgs e)
        {
            // Draw the background of the ListBox control for each item.
            //e.DrawBackground();
            // Define the default color of the brush as black.
            Brush myBrush = Brushes.Black;

            LinearGradientBrush linear = new LinearGradientBrush(e.Bounds, Color.FromArgb(0x94, 0xc1, 0x1f),
                Color.FromArgb(0xcd, 0xe2, 0x96), LinearGradientMode.Vertical);

            e.Graphics.FillRectangle(linear, e.Bounds);

            // Draw the current item text based on the current Font 
            // and the custom brush settings.
            e.Graphics.DrawString(((TabControl)sender).TabPages[e.Index].Text,
                e.Font, myBrush, e.Bounds, StringFormat.GenericDefault);
            // If the ListBox has focus, draw a focus rectangle around the selected item.
            e.DrawFocusRectangle();
        }

        private void takeOffToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MainV2.comPort.BaseStream.IsOpen)
            {
                string alt = Settings.Instance["takeoff_alt", "5"];

                if (DialogResult.Cancel == InputBox.Show("Enter Alt", "Enter Takeoff Alt", ref alt))
                    return;

                var altf = float.Parse(alt, CultureInfo.InvariantCulture);

                Settings.Instance["takeoff_alt"] = altf.ToString();

                MainV2.comPort.setMode("GUIDED");

                try
                {
                    MainV2.comPort.doCommand(MAVLink.MAV_CMD.TAKEOFF, 0, 0, 0, 0, 0, 0, altf);
                }
                catch
                {
                    CustomMessageBox.Show(Strings.CommandFailed, Strings.ERROR);
                }
            }
        }

        void tfr_GotTFRs(object sender, EventArgs e)
        {
            Invoke((Action)delegate
           {
               foreach (var item in tfr.tfrs)
               {
                   List<List<PointLatLng>> points = item.GetPaths();

                   foreach (var list in points)
                   {
                       GMapPolygon poly = new GMapPolygon(list, item.NAME);

                       poly.Fill = new SolidBrush(Color.FromArgb(30, Color.Blue));

                       tfrpolygons.Polygons.Add(poly);
                   }
               }
               tfrpolygons.IsVisibile = MainV2.ShowTFR;
           });
        }
        private void timer1_Tick(object sender, EventArgs e)
        {
            try
            {
                // Make sure that the curvelist has at least one curve
                if (zg1.GraphPane.CurveList.Count <= 0)
                    return;

                // Get the first CurveItem in the graph
                LineItem curve = zg1.GraphPane.CurveList[0] as LineItem;
                if (curve == null)
                    return;

                // Get the PointPairList
                IPointListEdit list = curve.Points as IPointListEdit;
                // If this is null, it means the reference at curve.Points does not
                // support IPointListEdit, so we won't be able to modify it
                if (list == null)
                    return;

                // Time is measured in seconds
                double time = (Environment.TickCount - tickStart) / 1000.0;

                // Keep the X scale at a rolling 30 second interval, with one
                // major step between the max X value and the end of the axis
                Scale xScale = zg1.GraphPane.XAxis.Scale;
                if (time > xScale.Max - xScale.MajorStep)
                {
                    xScale.Max = time + xScale.MajorStep;
                    xScale.Min = xScale.Max - 10.0;
                }

                // Make sure the Y axis is rescaled to accommodate actual data
                zg1.AxisChange();

                // Force a redraw

                zg1.Invalidate();
            }
            catch
            {
            }
        }

        private void tracklog_Scroll(object sender, EventArgs e)
        {
            try
            {
                BUT_clear_track_Click(sender, e);

                MainV2.comPort.lastlogread = DateTime.MinValue;
                MainV2.comPort.MAV.cs.ResetInternals();

                if (MainV2.comPort.logplaybackfile != null)
                    MainV2.comPort.logplaybackfile.BaseStream.Position =
                        (long)(MainV2.comPort.logplaybackfile.BaseStream.Length * (tracklog.Value / 100.0));

                updateLogPlayPosition(false);
            }
            catch
            {
            } // ignore any invalid 
        }

        private void triggerCameraToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                MainV2.comPort.setDigicamControl(true);
            }
            catch
            {
                CustomMessageBox.Show(Strings.CommandFailed, Strings.ERROR);
            }
        }

        private void TRK_zoom_Scroll(object sender, EventArgs e)
        {
            try
            {
                //Ocultar el Geotiff antes de modificar el Zoom
                if (tiffMarker != null)
                    tiffMarker.IsVisible = false;

                if (gMapControl1.MaxZoom + 1 == (double)TRK_zoom.Value)
                {
                    gMapControl1.Zoom = TRK_zoom.Value - .1;
                }
                else
                {
                    gMapControl1.Zoom = TRK_zoom.Value;
                }

                UpdateOverlayVisibility();

                //Actualizar el tamaño del marker de acuerdo a la escala del mapa
                UpdateTiffOverlay();
            }
            catch
            {
            }
        }

        private void updateBindingSource()
        {
            //  run at 25 hz.
            if (lastscreenupdate.AddMilliseconds(40) < DateTime.Now)
            {
                lock (updateBindingSourcelock)
                {
                    // this is an attempt to prevent an invoke queue on the binding update on slow machines
                    if (updateBindingSourcecount > 0)
                    {
                        if (lastscreenupdate < DateTime.Now.AddSeconds(-5))
                        {
                            updateBindingSourcecount = 0;
                        }
                        return;
                    }

                    updateBindingSourcecount++;
                    updateBindingSourceThreadName = Thread.CurrentThread.Name;
                }

                this.BeginInvokeIfRequired(delegate
                {
                    updateBindingSourceWork();

                    lock (updateBindingSourcelock)
                    {
                        updateBindingSourcecount--;
                    }
                });
            }
        }

        private void updateBindingSourceWork()
        {
            try
            {
                if (this.Visible)
                {   //load quick indicators on load
                    //MainV2.comPort.MAV.cs.UpdateCurrentSettings(bindingSourceQuickTab.UpdateDataSource(MainV2.comPort.MAV.cs));
                    //Console.Write("bindingSource1 ");
                    //MainV2.comPort.MAV.cs.UpdateCurrentSettings(bindingSource1.UpdateDataSource(MainV2.comPort.MAV.cs));
                    //Console.Write("bindingSourceHud ");
                    MainV2.comPort.MAV.cs.UpdateCurrentSettings(bindingSourceHud.UpdateDataSource(MainV2.comPort.MAV.cs));
                    //Console.WriteLine("DONE ");

                }
                else
                {
                    //Console.WriteLine("Null Binding");
                    MainV2.comPort.MAV.cs.UpdateCurrentSettings(bindingSourceHud.UpdateDataSource(MainV2.comPort.MAV.cs));
                }
                lastscreenupdate = DateTime.Now;
            }
            catch (Exception ex)
            {
                log.Error(ex);
                Tracking.AddException(ex);
            }
        }

        // to prevent cross thread calls while in a draw and exception
        private void updateClearMissionRouteMarkers()
        {
            // not async
            Invoke((Action)delegate
           {
               polygons.Routes.Clear();
               polygons.Markers.Clear();
               routes.Markers.Clear();
           });
        }

        // to prevent cross thread calls while in a draw and exception
        private void updateClearRoutes()
        {
            // not async
            Invoke((Action)delegate
           {
               routes.Routes.Clear();
               routes.Routes.Add(route);
           });
        }

        private void updateClearRoutesMarkers()
        {
            Invoke((Action)delegate
           {
               routes.Markers.Clear();
           });
        }
        private void updateLogPlayPosition(bool updatetracklog = true)
        {
            BeginInvoke((Action)delegate
           {
               try
               {
                   if (updatetracklog && tracklog.Visible)
                   {
                       // prevent event fire
                       tracklog.ValueChanged -= tracklog_Scroll;
                       tracklog.Value = (int)(MainV2.comPort.logplaybackfile.BaseStream.Position /
                                                (double)MainV2.comPort.logplaybackfile.BaseStream.Length * 100);
                       tracklog.ValueChanged += tracklog_Scroll;
                   }

                   //if (lbl_logpercent.Visible)
                   //    lbl_logpercent.Text =
                   //        (MainV2.comPort.logplaybackfile.BaseStream.Position /
                   //         (double)MainV2.comPort.logplaybackfile.BaseStream.Length).ToString("0.00%");

                   //if (lbl_playbackspeed.Visible)
                   //    lbl_playbackspeed.Text = "x " + LogPlayBackSpeed;
               }
               catch
               {
               }
           });
        }

        private void updateMapPosition(PointLatLng currentloc)
        {
            Invoke((Action)delegate
           {
               try
               {
                   if (lastmapposchange.Second != DateTime.Now.Second)
                   {
                       if (Math.Abs(currentloc.Lat - gMapControl1.Position.Lat) > 0.0001 || Math.Abs(currentloc.Lng - gMapControl1.Position.Lng) > 0.0001)
                       {
                           gMapControl1.Position = currentloc;
                       }
                       lastmapposchange = DateTime.Now;
                   }
                   //hud1.Refresh();
               }
               catch
               {
               }
           });
        }

        private void updateMapZoom(int zoom)
        {
            Invoke((Action)delegate
           {
               try
               {
                   gMapControl1.Zoom = zoom;
               }
               catch
               {
               }
           });
        }

        void UpdateOverlayVisibility()
        {
            // change overlay visability
            if (gMapControl1.ViewArea != null)
            {
                var bounds = gMapControl1.ViewArea;
                bounds.Inflate(1, 1);

                foreach (var poly in kmlpolygons.Polygons)
                {
                    if (bounds.Contains(poly.Points[0]))
                        poly.IsVisible = true;
                    else
                        poly.IsVisible = false;
                }
            }
        }

        private void updatePlayPauseButton(bool playing)
        {
            if (playing)
            {
                if (BUT_playlog.Text == "Pause")
                    return;

                BeginInvoke((Action)delegate
               {
                   try
                   {
                       BUT_playlog.Text = "Pause";
                   }
                   catch
                   {
                   }
               });
            }
            else
            {
                if (BUT_playlog.Text == "Play")
                    return;

                BeginInvoke((Action)delegate
               {
                   try
                   {
                       BUT_playlog.Text = "Play";
                   }
                   catch
                   {
                   }
               });
            }
        }

        private void updateRoutePosition()
        {
            // not async
            Invoke((Action)delegate
           {
               gMapControl1.UpdateRouteLocalPosition(route);
           });
        }
        private void zg1_DoubleClick(object sender, EventArgs e)
        {

            var selectform = new Form
            {
                Name = "select",
                Width = 50,
                Height = 50,
                Text = "Display This",
                AutoSize = true,
                StartPosition = FormStartPosition.CenterParent,
                MaximizeBox = false,
                MinimizeBox = false,
                AutoScroll = true
            };

            int x = 5;
            int y = 2;

            {
                CheckBox chk_box = new CheckBox();
                chk_box.Text = "Logarithmic";
                chk_box.Name = "Logarithmic";
                chk_box.Location = new Point(x, y);
                chk_box.Size = new Size(100, 20);
                chk_box.CheckedChanged += chk_log_CheckedChanged;

                selectform.Controls.Add(chk_box);
            }

//            ThemeManager.ApplyThemeTo(selectform);

            y += 20;

            object thisBoxed = MainV2.comPort.MAV.cs;
            Type test = thisBoxed.GetType();

            int max_length = 0;
            List<string> fields = new List<string>();

            foreach (var field in test.GetProperties())
            {
                // field.Name has the field's name.
                object fieldValue = field.GetValue(thisBoxed, null); // Get value
                if (fieldValue == null)
                    continue;

                if (!fieldValue.IsNumber())
                    continue;

                max_length = Math.Max(max_length, TextRenderer.MeasureText(field.Name, selectform.Font).Width);
                fields.Add(field.Name);
            }
            max_length += 25;
            fields.Sort();

            int col_count = (int)(Screen.FromControl(this).Bounds.Width * 0.8f) / max_length;
            int row_count = fields.Count / col_count + ((fields.Count % col_count == 0) ? 0 : 1);
            int row_height = 20;

            selectform.SuspendLayout();

            int i = 1;
            foreach (var field in fields)
            {
                CheckBox chk_box = new CheckBox();

//                ThemeManager.ApplyThemeTo(chk_box);

                if (list1item != null && list1item.Name == field)
                {
                    chk_box.Checked = true;
                    chk_box.BackColor = Color.Green;
                }
                if (list2item != null && list2item.Name == field)
                {
                    chk_box.Checked = true;
                    chk_box.BackColor = Color.Green;
                }
                if (list3item != null && list3item.Name == field)
                {
                    chk_box.Checked = true;
                    chk_box.BackColor = Color.Green;
                }
                if (list4item != null && list4item.Name == field)
                {
                    chk_box.Checked = true;
                    chk_box.BackColor = Color.Green;
                }
                if (list5item != null && list5item.Name == field)
                {
                    chk_box.Checked = true;
                    chk_box.BackColor = Color.Green;
                }
                if (list6item != null && list6item.Name == field)
                {
                    chk_box.Checked = true;
                    chk_box.BackColor = Color.Green;
                }
                if (list7item != null && list7item.Name == field)
                {
                    chk_box.Checked = true;
                    chk_box.BackColor = Color.Green;
                }
                if (list8item != null && list8item.Name == field)
                {
                    chk_box.Checked = true;
                    chk_box.BackColor = Color.Green;
                }
                if (list9item != null && list9item.Name == field)
                {
                    chk_box.Checked = true;
                    chk_box.BackColor = Color.Green;
                }
                if (list10item != null && list10item.Name == field)
                {
                    chk_box.Checked = true;
                    chk_box.BackColor = Color.Green;
                }

                chk_box.Text = field;
                chk_box.Name = field;
                chk_box.Tag = "custom";
                chk_box.Location = new Point(5 + (i / row_count) * (max_length + 5), 2 + (i % row_count) * row_height);
                chk_box.Size = new Size(120, 20);
                chk_box.CheckedChanged += chk_box_CheckedChanged;
                chk_box.AutoSize = true;

                selectform.Controls.Add(chk_box);

                x += 0;
                y += 20;
                i++;

                if (y > selectform.Height - 50)
                {
                    x += 120;
                    y = 10;

                    selectform.Width = x + 120;
                }
            }

            selectform.ResumeLayout();

            selectform.Shown += (o, args) =>
            {
                selectform.Controls.ForEach(a =>
                {
                    if (a is CheckBox && ((CheckBox)a).Checked)
                        ((CheckBox)a).BackColor = Color.Green;
                });
            };

            selectform.Show();
        }

        private void Zoomlevel_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                if (gMapControl1.MaxZoom + 1 == (double)Zoomlevel.Value)
                {
                    gMapControl1.Zoom = (double)Zoomlevel.Value - .1;
                }
                else
                {
                    gMapControl1.Zoom = (double)Zoomlevel.Value;
                }
            }
            catch
            {
            }
        }

        private void but_test_Click(object sender, EventArgs e)
        {
            MainV2.comPort.doARM(true, true);
            MainV2.comPort.doCommand(MAVLink.MAV_CMD.GUIDED_ENABLE, 0, 0, 0, 0, 0, 0, 0);
        }

        private void setHomeHereToolStripMenuItem2_Click(object sender, EventArgs e)
        {
            object homealt = (srtm.getAltitude(MouseDownStart.Lat, MouseDownStart.Lng).alt * CurrentState.multiplieralt).ToString("0");
            object homelat = MouseDownStart.Lat.ToString();
            object homelng = MouseDownStart.Lng.ToString();

//            FlightPlanner.instance.sethomeh(homealt, homelat, homelng);
        }

        public void modifybutton()
        {
            Joystick.Joystick joystick = new Joystick.Joystick(() => MainV2.comPort);
            //joy.elevons = CHK_elevons.Checked;

            if (!joystick.start(COMBJOY.Text))
            {

                BUT_EchoGrab.Enabled = false;
            }

        }


        public void ButJoyOn_Click(object sender, EventArgs e)
        {
            activatedjoy(sender, e);


            /*if (MainV2.joystick == null || MainV2.joystick.enabled == false)
            {
                try
                {
                    if (MainV2.joystick != null)
                        MainV2.joystick.UnAcquireJoyStick();
                }
                catch
                {
                }

                // all config is loaded from the xmls
                Joystick.Joystick joystick = new Joystick.Joystick(() => MainV2.comPort);
                //joy.elevons = CHK_elevons.Checked;

                if (!joystick.start(COMBJOY.Text))
                {
                    CustomMessageBox.Show("Please Connect a Joystick", "No Joystick");
                    joystick.Dispose();
                    return;
                }

                //Settings.Instance["joystick_name"] = CMB_joysticks.Text;

                MainV2.joystick = joystick;
                MainV2.joystick.enabled = true;

               // BUT_enable.Text = "Disable";

                //timer1.Start();
            }
            else
            {
                MainV2.joystick.enabled = false;

                MainV2.joystick.clearRCOverride();

                MainV2.joystick = null;


                //timer1.Stop();

              //  BUT_enable.Text = "Enable";
            }
            */
        }

        private void loadjoy()
        {
            try
            {
                var joysticklist = Joystick.Joystick.getDevices();

                foreach (DeviceInstance device in joysticklist)
                {
                    COMBJOY.Items.Add(device.ProductName.TrimUnPrintable());
                }
            }
            catch
            {
                CustomMessageBox.Show("Error geting joystick list: do you have the directx redist installed?");
                this.Close();
                return;
            }

            if (COMBJOY.Items.Count > 0 && COMBJOY.SelectedIndex == -1)
                COMBJOY.SelectedIndex = 0;

            try
            {
                if (Settings.Instance.ContainsKey("joystick_name") && Settings.Instance["joystick_name"].ToString() != "")
                    COMBJOY.Text = Settings.Instance["joystick_name"].ToString();
            }
            catch
            {
            }

            try
            {

            }
            catch
            {
                if (Settings.Instance.ContainsKey("joy_elevons")) ;

            } // IF 1 DOESNT EXIST NONE WILL

            var tempjoystick = new Joystick.Joystick(() => MainV2.comPort);

            // label14.Text += " " + MainV2.comPort.MAV.cs.firmware.ToString();

            modifybutton();
        }

        int[] getButtonNumbers()
        {
            int[] temp = new int[128];
            temp[0] = -1;
            for (int a = 0; a < temp.Length - 1; a++)
            {
                temp[a + 1] = a;
            }
            return temp;
        }

        private void BUT_EchoGrab_Click(object sender, EventArgs e)
        {
            //MAVLink.MAV_CMD.USER_3 - Este comando es usado para iniciar o detener la captura
            //de dato de la Ecosonda.
            //Parametro P1 = 0 - Detener la captura de datos.
            //Parametro P1 = 1 - Iniciar la captura de datos.
            try
            {
                bool res = MainV2.comPort.doCommand(200, (byte)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL,
                                                               MAVLink.MAV_CMD.USER_3, 1, 0, 0, 0, 0, 0, 0);
                if(!res)
                {
                    CustomMessageBox.Show("Error executing command.");
                }
            }
            catch (Exception ex)
            {

                CustomMessageBox.Show(ex.Message);
            }
        }

        private void BUT_StopGrab_Click(object sender, EventArgs e)
        {
            //MAVLink.MAV_CMD.USER_3 - Este comando es usado para iniciar o detener la captura
            //de dato de la Ecosonda.
            //Parametro P1 = 0 - Detener la captura de datos.
            //Parametro P1 = 1 - Iniciar la captura de datos.
            try
            {
                bool res = MainV2.comPort.doCommand(200, (byte)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL,
                                                               MAVLink.MAV_CMD.USER_3, 0, 0, 0, 0, 0, 0, 0);
                if (!res)
                {
                    CustomMessageBox.Show("Error executing command.");
                }
            }
            catch (Exception ex)
            {
                CustomMessageBox.Show(ex.Message);
            }
        }

        //Timer cada 500ms para parpadear el color del boton BUT_EchoGrab
        private void BUT_EchoGrab_BlinkTimer_Tick(object sender, EventArgs e)
        {
            if (BUT_EchoGrab.Tag.ToString() == "1")
            {
                CustomColor.RestoreColor(BUT_EchoGrab);
                BUT_EchoGrab.Tag = "0";
            }
            else
            {
                CustomColor.SetRecordColor(BUT_EchoGrab);
                BUT_EchoGrab.Tag = "1";
            }
        }

        public bool status_btn = false;
        public bool manual_status = false;

        private void BUT_manual_Click(object sender, EventArgs e)
        {
            try
            {
                ((Control)sender).Enabled = false;
                MainV2.comPort.setMode("Manual");
            }
            catch
            {
                CustomMessageBox.Show(Strings.CommandFailed, Strings.ERROR);
            }
            ((Control)sender).Enabled = true;
        }

        private void UpdateButColorMode()
        {

            string mode = MainV2.comPort.MAV.cs.mode;

            if (mode == "Auto")
            {
                CustomColor.SetActiveMode(BUT_quickauto);
                CustomColor.RestoreColor(BUT_quickrtl);
                CustomColor.RestoreColor(BUT_manual);
            }
            else if (mode == "unknow")
            {
                CustomColor.RestoreColor(BUT_quickauto);
                CustomColor.RestoreColor(BUT_quickrtl);
                CustomColor.RestoreColor(BUT_manual);

            }
            else if (mode == "Loiter")
            {
                CustomColor.RestoreColor(BUT_quickauto);
                CustomColor.RestoreColor(BUT_quickrtl);
                CustomColor.RestoreColor(BUT_manual);
            }
            else if (mode == "RTL")
            {
                CustomColor.SetActiveMode(BUT_quickrtl);
                CustomColor.RestoreColor(BUT_quickauto);
                CustomColor.RestoreColor(BUT_manual);
            }
            else if (mode == "Manual")
            {
                CustomColor.SetActiveMode(BUT_manual);
                CustomColor.RestoreColor(BUT_quickauto);
                CustomColor.RestoreColor(BUT_quickrtl);
            }
            else
            {
                CustomColor.RestoreColor(BUT_quickauto);
                CustomColor.RestoreColor(BUT_quickrtl);
                CustomColor.RestoreColor(BUT_manual);
            }
        }

        private void UpdateButArmingColor()
        {
            bool armed = MainV2.comPort.MAV.cs.armed;

            label19.Text = armed ? "Armed" : "Disarmed";

            if (armed)
            {
                CustomColor.SetActiveMode(BUT_ARM);
            }
            else
            {
                CustomColor.SetDisarmColor(BUT_ARM);
            }
        }

        string _lastMode = "";
        private void label18_TextChanged(object sender, EventArgs e)
        {
            UpdateButColorMode();

            //Inicializar los filtros speedMedianFilter y distRemainMedianFilter al pasar a modo Auto
            
            if (MainV2.comPort.MAV.cs.mode == "Auto" && _lastMode != "Auto")
            {

                for (int i = 0; i < 10; i++)
                {
                    speedMedianFilter.ProcessSample(1.0);
                }

                System.Timers.Timer t = new System.Timers.Timer(6000);
                t.AutoReset = false;
                t.Elapsed += (sender2, e2) => {
                    for (int i = 0; i < 10; i++)
                    {
                        distRemainMedianFilter.ProcessSample(distanceBar1.totaldist - distanceBar1.traveleddist);
                    }
                    ((System.Timers.Timer)sender2).Close();
                };
                t.Start();

            }
            

            _lastMode = MainV2.comPort.MAV.cs.mode;
        }

        private void label19_TextChanged(object sender, EventArgs e)
        {
            UpdateButArmingColor();
        }

        int lastSequenceL = 0, counterTimeOutL = 0;
        int lastSequenceR = 0, counterTimeOutR = 0;
        int lastSequenceEchosounder = 0, counterTimeOutEchosounder = 0;
        private void TimerUpdateSecondMAV_Tick(object sender, EventArgs e)
        {
            //Mapa de Variables. sysid: 200, compid: MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL

            // depth                        = ch1in
            // lastSequenceEchosounder      = ch2in
            // echosounderGrabStatus        = ch3in
            // storageAvailable             = ch4in
            // Temp_Body                    = ch5in
            // Hum_Body                     = ch6in
            // Vmin_Body                    = ch7in
            // Vmax_Body                    = ch8in


            // Temp_L                       = ch1out
            // Hum_L                        = ch2out
            // Current_L                    = ch3out
            // RPM_L                        = ch4out
            // Bat_L                        = ch5out
            // lastSequenceL                = ch6out

            // Temp_R                       = ch7out
            // Hum_R                        = ch8out
            // Current_R                    = ch9out
            // RPM_R                        = ch10out
            // Bat_R                        = ch11out
            // lastSequenceR                = ch12out

            // Vmin_Floater                 = ch13out
            // Vmax_Floater                 = ch14out
            


            double depth = 0;
            if(MainV2.comPort.MAVlist.Contains(200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL))
            {
                //Actualizar la etiqueta de la ecosonda solo si hay datos nuevos.
                if (MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch2in > lastSequenceEchosounder)
                {
                    depth = (double)MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch1in / 100.0;
                    depth = depthFilter.ProcessSample(depth);
                    
                    if (Depth_Gauge.Theme != CodeArtEng.Gauge.GaugeTheme.Dark)
                    {
                        Depth_Gauge.Theme = CodeArtEng.Gauge.GaugeTheme.Dark;
                        Depth_Gauge.IgnoreLimits = false;
                    }
                    Depth_Gauge.Value = depth;
                    if(Depth_Gauge.Value > Depth_Gauge.Maximum)
                    {
                        Depth_Gauge.Maximum = Math.Ceiling(Depth_Gauge.Value * 1.3);
                        Depth_Gauge.Maximum = Math.Truncate(Depth_Gauge.Maximum);
                        Depth_Gauge.Title = "Depth (0 - " + Depth_Gauge.Maximum.ToString("N0") + "m)";
                    }

                    counterTimeOutEchosounder = 0;
                }

                lastSequenceEchosounder = (int)MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch2in;

                Temp_Body_Gauge.Value = MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch5in / 100.0;
                Hum_Body_Gauge.Value = MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch6in / 100.0;


                //Visualizar el % de bateria en base al voltaje.
                //ch13out - se recive el V min (10%)
                //ch14out - se recive el V max (100%)
                //Recta de ajuste mx+n: P1(Vmin, 10%); P2(Vmax, 100%)
                double Vmin_Floater = ((double)MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch13out / 100.0);
                double Vmax_Floater = ((double)MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch14out / 100.0);
                double m = (100 - 10) / (Vmax_Floater - Vmin_Floater);
                double n = 100 - m * Vmax_Floater;
                if (Double.IsNaN(m))
                {
                    m = n = 0;
                }

                //Actualizar las etiquetas de los flotadores solo si hay datos nuevos.
                if (MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch6out > lastSequenceL)
                {
                    int batPercentL = (int)(m * (MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch5out / 100.0) + n);
                    if (batPercentL > 100)
                        batPercentL = 100;
                    if (batPercentL < 0)
                        batPercentL = 0;
                    Bat_L_Gauge.Value = batPercentL;

                    Temp_L_Gauge.Value = MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch1out / 100.0;
                    Hum_L_Gauge.Value = MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch2out / 100.0;
                    CurrentL_Indicator.Value = MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch3out / 100.0;
                    //int RPM_L = MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch4out;

                    //Actualizar el Tema si no esta en TimeOut
                    if (Bat_L_Gauge.Theme != CodeArtEng.Gauge.GaugeTheme.Dark)
                    {
                        Bat_L_Gauge.Theme = CodeArtEng.Gauge.GaugeTheme.Dark;
                        Bat_L_Gauge.IgnoreLimits = false;
                    }
                    if (Temp_L_Gauge.Theme != CodeArtEng.Gauge.GaugeTheme.Dark)
                    {
                        Temp_L_Gauge.Theme = CodeArtEng.Gauge.GaugeTheme.Dark;
                        Temp_L_Gauge.IgnoreLimits = false;
                    }
                    if (Hum_L_Gauge.Theme != CodeArtEng.Gauge.GaugeTheme.Dark)
                    {
                        Hum_L_Gauge.Theme = CodeArtEng.Gauge.GaugeTheme.Dark;
                        Hum_L_Gauge.IgnoreLimits = false;
                    }
                    if (CurrentL_Indicator.Theme != CodeArtEng.Gauge.GaugeTheme.Dark)
                    {
                        CurrentL_Indicator.Theme = CodeArtEng.Gauge.GaugeTheme.Dark;
                        CurrentL_Indicator.IgnoreLimits = false;
                    }

                    counterTimeOutL = 0;
                }

                lastSequenceL = (int)MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch6out;

                //Actualizar las etiquetas de los flotadores solo si hay datos nuevos.
                if (MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch12out > lastSequenceR)
                {
                    int batPercentR = (int)(m * (MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch11out / 100.0) + n);
                    if (batPercentR > 100)
                        batPercentR = 100;
                    if (batPercentR < 0)
                        batPercentR = 0;
                    Bat_R_Gauge.Value = batPercentR;

                    Temp_R_Gauge.Value = MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch7out / 100.0;
                    Hum_R_Gauge.Value = MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch8out / 100.0;
                    CurrentR_Indicator.Value = MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch9out / 100.0;
                    //int RPM_R = MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch10out;

                    //Actualizar el Tema si no esta en TimeOut
                    if (Bat_R_Gauge.Theme != CodeArtEng.Gauge.GaugeTheme.Dark)
                    {
                        Bat_R_Gauge.Theme = CodeArtEng.Gauge.GaugeTheme.Dark;
                        Bat_R_Gauge.IgnoreLimits = false;
                    }
                    if (Temp_R_Gauge.Theme != CodeArtEng.Gauge.GaugeTheme.Dark)
                    {
                        Temp_R_Gauge.Theme = CodeArtEng.Gauge.GaugeTheme.Dark;
                        Temp_R_Gauge.IgnoreLimits = false;
                    }
                    if (Hum_R_Gauge.Theme != CodeArtEng.Gauge.GaugeTheme.Dark)
                    {
                        Hum_R_Gauge.Theme = CodeArtEng.Gauge.GaugeTheme.Dark;
                        Hum_R_Gauge.IgnoreLimits = false;
                    }
                    if (CurrentR_Indicator.Theme != CodeArtEng.Gauge.GaugeTheme.Dark)
                    {
                        CurrentR_Indicator.Theme = CodeArtEng.Gauge.GaugeTheme.Dark;
                        CurrentR_Indicator.IgnoreLimits = false;
                    }

                    counterTimeOutR = 0;
                }

                lastSequenceR = (int)MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch12out;

                //Para parpadear el color del BUT_EchoGrab cuando se capturen datos de la ecosonda
                int echosounderGrabStatus = (int)MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch3in;
                if(echosounderGrabStatus > 0)
                {
                    if(!BUT_EchoGrab_BlinkTimer.Enabled)
                        BUT_EchoGrab_BlinkTimer.Start();
                }
                else
                {
                    BUT_EchoGrab_BlinkTimer.Stop();
                    if (BUT_EchoGrab.Tag.ToString() != "off")
                    {
                        CustomColor.RestoreColor(BUT_EchoGrab);
                        BUT_EchoGrab.Tag = "off";
                    }
                }


                //Visualizar el % de bateria en base al voltaje.
                //ch13out - se recive el V min (10%)
                //ch14out - se recive el V max (100%)
                //Recta de ajuste mx+n: P1(Vmin, 10%); P2(Vmax, 100%)
                double Vmin_Body = ((double)MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch7in / 100.0);
                double Vmax_Body = ((double)MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch8in / 100.0);
                double m2 = (100 - 10) / (Vmax_Body - Vmin_Body);
                double n2 = 100 - m2 * Vmax_Body;
                if (Double.IsNaN(m2))
                {
                    m2 = n2 = 0;
                }

                int batPercentMain = (int)(m2 * MainV2.comPort.MAV.cs.battery_voltage + n2);
                if (batPercentMain > 100)
                    batPercentMain = 100;
                if (batPercentMain < 0)
                    batPercentMain = 0;
                Bat_Body_Gauge.Value = batPercentMain;


                //Actualizar el Gauge de Memoria Disponible
                double storageAvailable = (double)MainV2.comPort.MAVlist[200, (int)MAVLink.MAV_COMPONENT.MAV_COMP_ID_PERIPHERAL].cs.ch4in;
                Storage_Gauge.Value = storageAvailable;


            }

            //Si se ha pasado mas de 4 ciclos y no hay datos nuevos, se considera timeout.
            counterTimeOutEchosounder++;
            if (counterTimeOutEchosounder > 4)
            {
                Depth_Gauge.Value = 0;
                Depth_Gauge.Theme = CodeArtEng.Gauge.GaugeTheme.NotDefined;
                Depth_Gauge.IgnoreLimits = true;
                counterTimeOutEchosounder = 0;
            }

            //Si se ha pasado mas de 4 ciclos y no hay datos nuevos, se considera timeout.
            counterTimeOutL++;
            if (counterTimeOutL > 4)
            {
                Bat_L_Gauge.Value = 0;
                Temp_L_Gauge.Value = 0;
                Hum_L_Gauge.Value = 0;
                CurrentL_Indicator.Value = 0;

                Bat_L_Gauge.Theme = CodeArtEng.Gauge.GaugeTheme.NotDefined;
                Bat_L_Gauge.IgnoreLimits = true;
                Temp_L_Gauge.Theme = CodeArtEng.Gauge.GaugeTheme.NotDefined;
                Temp_L_Gauge.IgnoreLimits = true;
                Hum_L_Gauge.Theme = CodeArtEng.Gauge.GaugeTheme.NotDefined;
                Hum_L_Gauge.IgnoreLimits = true;
                CurrentL_Indicator.Theme = CodeArtEng.Gauge.GaugeTheme.NotDefined;
                CurrentL_Indicator.IgnoreLimits = true;

                counterTimeOutL = 0;
            }

            //Si se ha pasado mas de 4 ciclos y no hay datos nuevos, se considera timeout.
            counterTimeOutR++;
            if (counterTimeOutR > 4)
            {
                Bat_R_Gauge.Value = 0;
                Temp_R_Gauge.Value = 0;
                Hum_R_Gauge.Value = 0;
                CurrentR_Indicator.Value = 0;

                Bat_R_Gauge.Theme = CodeArtEng.Gauge.GaugeTheme.NotDefined;
                Bat_R_Gauge.IgnoreLimits = true;
                Temp_R_Gauge.Theme = CodeArtEng.Gauge.GaugeTheme.NotDefined;
                Temp_R_Gauge.IgnoreLimits = true;
                Hum_R_Gauge.Theme = CodeArtEng.Gauge.GaugeTheme.NotDefined;
                Hum_R_Gauge.IgnoreLimits = true;
                CurrentR_Indicator.Theme = CodeArtEng.Gauge.GaugeTheme.NotDefined;
                CurrentR_Indicator.IgnoreLimits = true;

                counterTimeOutR = 0;
            }


            //Actualizar las barras de los motores en reversa
            int ch1Down = -(int)MainV2.comPort.MAV.cs.ch1out + 2500;
            int ch3Down = -(int)MainV2.comPort.MAV.cs.ch3out + 2500;
            int ch1Up = (int)MainV2.comPort.MAV.cs.ch1out;
            int ch3Up = (int)MainV2.comPort.MAV.cs.ch3out;

            ch1Down = (int)((ch1Down < progressBarL_Down.Minimum) ? progressBarL_Down.Minimum : ch1Down);
            ch1Down = (int)((ch1Down > progressBarL_Down.Maximum) ? progressBarL_Down.Maximum : ch1Down);

            ch1Up = (int)((ch1Up < progressBarL_Up.Minimum) ? progressBarL_Up.Minimum : ch1Up);
            ch1Up = (int)((ch1Up > progressBarL_Up.Maximum) ? progressBarL_Up.Maximum : ch1Up);

            ch3Down = (int)((ch3Down < progressBarR_Down.Minimum) ? progressBarR_Down.Minimum : ch3Down);
            ch3Down = (int)((ch3Down > progressBarR_Down.Maximum) ? progressBarR_Down.Maximum : ch3Down);

            ch3Up = (int)((ch3Up < progressBarR_Up.Minimum) ? progressBarR_Up.Minimum : ch3Up);
            ch3Up = (int)((ch3Up > progressBarR_Up.Maximum) ? progressBarR_Up.Maximum : ch3Up);

            progressBarL_Down.Value = ch1Down;
            progressBarL_Up.Value = ch1Up;
            progressBarR_Down.Value = ch3Down;
            progressBarR_Up.Value = ch3Up;


            //Para activar o desactivar la alarma de profundidad.
            if (depth > 0 && depth <= (double)NUM_DepthAlarmValue.Value && depthAlarmSound)
            {
                depthAlertTimer.Enabled = true;
            }
            else
            {
                depthAlertTimer.Enabled = false;
            }

            
        }


        private void depthAlertTimer_Tick_1(object sender, EventArgs e)
        {
            simpleSound.Play();
        }

        private void BUT_Mute_Click(object sender, EventArgs e)
        {
            depthAlarmSound = !depthAlarmSound;

            if (depthAlarmSound)
            {
                BUT_MuteDepthAlarm.BackColor = Color.FromArgb(148, 193, 31);
                BUT_MuteDepthAlarm.ImageIndex = 0;
            }
            else
            {
                BUT_MuteDepthAlarm.BackColor = Color.Red;
                BUT_MuteDepthAlarm.ImageIndex = 1;
            }

            Settings.Instance["depthAlarmSound"] = depthAlarmSound.ToString();
        }

        
        private void PingTimer_Tick(object sender, EventArgs e)
        {
            Ping ping = new Ping();
            ping.PingCompleted += OnPingCompleted;
            ping.SendAsync("192.168.4.1", 500, null);
            
        }

        private void OnPingCompleted(object sender, PingCompletedEventArgs e)
        {
            if(e.Reply.Status == IPStatus.Success)
            {
                BUT_DownloadEchoData.Visible = true;
                BUT_ClearEchoData.Visible = true;
            }
            else
            {
                BUT_DownloadEchoData.Visible = false;
                BUT_ClearEchoData.Visible = false;
            }
        }


        delegate IProgressReporterDialogue ProgressEventHandle(string title);
        static event ProgressEventHandle CreateIProgressReporterDialogue;
        IProgressReporterDialogue formProgressReporter;
        string fileOut = "";
        System.Net.Sockets.UdpClient udpClient;
        int totalBytes = 1;
        int receivedBytes = 0;
        string receivedRAW = "";
        private void BUT_DownloadEchoData_Click(object sender, EventArgs e)
        {
            totalBytes = 1;
            receivedBytes = 0;
            receivedRAW = "";

            var dialog = new CommonSaveFileDialog();
            dialog.EnsurePathExists = true;
            dialog.AlwaysAppendDefaultExtension = true;
            dialog.DefaultFileName = "MisionData_" + DateTime.Now.ToString("yyyy-MM-dd_HH'h'mm'm'ss's'");
            dialog.DefaultExtension = ".txt";
            dialog.Filters.Add(new CommonFileDialogFilter("XYZ File", "*.txt"));
            if (dialog.ShowDialog() == CommonFileDialogResult.Ok)
            {
                fileOut = dialog.FileName;

                formProgressReporter = CreateIProgressReporterDialogue("Download and Converting Data");

                formProgressReporter.DoWork += ReceiverBackGround;
                formProgressReporter.UpdateProgressAndStatus(-1, "...");

                formProgressReporter.RunBackgroundOperationAsync();

                formProgressReporter.Dispose();
            }
        }

        private void ReceiverBackGround(IProgressReporterDialogue sender)
        {
            if (formProgressReporter != null)
                this.formProgressReporter.UpdateProgressAndStatus(1, "Connecting...");

            udpClient = new System.Net.Sockets.UdpClient();
            udpClient.Connect("192.168.4.1", 8080);

            try
            {
                udpClient.BeginReceive(new AsyncCallback(ReceiverCallback), null);
            }
            catch (Exception e)
            {
                CustomMessageBox.Show("Error Getting Data\n\n" + e.Message);
            }

            byte[] sendBuff = Encoding.ASCII.GetBytes("/download");

            udpClient.Send(sendBuff, sendBuff.Length);

            //Esperamos a recibir todos los bytes
            while (receivedBytes < totalBytes)
            {
                //Si el usuario cancela el dialogo
                if (formProgressReporter != null && formProgressReporter.doWorkArgs.CancelRequested)
                {
                    formProgressReporter.doWorkArgs.CancelAcknowledged = true;
                    formProgressReporter.doWorkArgs.ErrorMessage = "User Canceled.";

                    udpClient.Close();

                    return;
                }
            }

            if (formProgressReporter != null)
                this.formProgressReporter.UpdateProgressAndStatus(100, "Applying Filtering.");


            List<string> lines = new List<string>();
            List<Tuple<double, double>> latLonList = new List<Tuple<double, double>>();
            List<double> depthList = new List<double>();


            //Aplicando filtrado
            lines.AddRange(receivedRAW.Split("\r\n".ToArray(), StringSplitOptions.RemoveEmptyEntries));

            foreach (string line in lines)
            {
                string[] items = line.Split(',');
                if (items.Length >= 3)
                {
                    double lat = double.Parse(items[0], CultureInfo.InvariantCulture);
                    double lon = double.Parse(items[1], CultureInfo.InvariantCulture);
                    double depth = double.Parse(items[2], CultureInfo.InvariantCulture);

                    PointLatLngAlt point = new PointLatLngAlt(lat, lon);
                    double[] utm = point.ToUTM();

                    latLonList.Add(utm[0], utm[1]);
                    depthList.Add(depth);
                }
            }

            //Crear el Filtro - orden 30, determinado experimental
            MathNet.Filtering.OnlineFilter filter = MathNet.Filtering.OnlineFilter.CreateDenoise(30);

            //Filtrar Forward y Backward
            double[] depthForward = filter.ProcessSamples(depthList.ToArray());
            filter.Reset();
            double[] depthBackward = filter.ProcessSamples(depthForward.Reverse().ToArray());
            depthBackward = depthBackward.Reverse().ToArray();

            //Crear la lista string Lat,Lon,Depth
            List<string> listOut = new List<string>();
            CultureInfo culture = CultureInfo.CreateSpecificCulture("en-US");
            for (int i = 0; i < latLonList.Count(); i++)
            {
                listOut.Add(latLonList[i].Item1.ToString("F3", culture) + "," + // Lat
                            latLonList[i].Item2.ToString("F3", culture) + "," + // Lon
                            depthBackward[i].ToString("F3", culture));          // Depth
            }

            //Escribir el archivo XYZ final
            try
            {
                if (!fileOut.EndsWith(".txt", true, culture))
                {
                    fileOut += ".txt";
                }
                File.WriteAllLines(fileOut, listOut.ToArray());

                //Escribir tambien el archivo RAW recibido
                fileOut.RemoveFromEnd(".txt");
                File.WriteAllText(fileOut + "_RAW.txt", receivedRAW);

            }
            catch (Exception e)
            {
                if (formProgressReporter != null)
                    formProgressReporter.doWorkArgs.ErrorMessage = e.Message;
                return;
            }


        }

        class Header { public int Size; }
        class Response { public bool Result; }

        private void ReceiverCallback(IAsyncResult res)
        {
            try
            {
                IPEndPoint RemoteIpEndPoint = new IPEndPoint(IPAddress.Any, 8080);
                byte[] received = udpClient.EndReceive(res, ref RemoteIpEndPoint);

                string str = Encoding.UTF8.GetString(received);

                if (str.Contains("Size"))
                {

                    Header header = Newtonsoft.Json.JsonConvert.DeserializeObject<Header>(str);
                    totalBytes = header.Size;
                }
                else
                {
                    receivedBytes += received.Length;

                    //Acumulamos toda la string recibida en receivedRAW
                    receivedRAW += str;

                    if (formProgressReporter != null)
                        this.formProgressReporter.UpdateProgressAndStatus(100 * receivedBytes / totalBytes, "Download.");
                }

                try
                {
                    udpClient.BeginReceive(new AsyncCallback(ReceiverCallback), null);
                }
                catch { }

            }
            catch (Exception e)
            {
                CustomMessageBox.Show("Error Getting Data\n\n" + e.Message);
                if (formProgressReporter != null)
                {
                    formProgressReporter.doWorkArgs.CancelRequested = true;
                }
            }
        }

        private void BUT_ClearEchoData_Click(object sender, EventArgs e)
        {
            udpClient = new System.Net.Sockets.UdpClient();
            udpClient.Connect("192.168.4.1", 8080);

            // Si no hay respuesta en 3s, se dispara un timeout
            System.Threading.Timer timer = new System.Threading.Timer(new TimerCallback((object obj) => {

                udpClient.Close();
                CustomMessageBox.Show("Timeout waiting for response");

            }), null, 3000, Timeout.Infinite);


            try
            {
                udpClient.BeginReceive(new AsyncCallback((IAsyncResult res) => {

                    try
                    {
                        IPEndPoint RemoteIpEndPoint = new IPEndPoint(IPAddress.Any, 8080);
                        byte[] received = udpClient.EndReceive(res, ref RemoteIpEndPoint);

                        string str = Encoding.UTF8.GetString(received);

                        if (str.Contains("Result"))
                        {
                            // Detener el timeout de la respuesta
                            timer.Stop();
                            timer.Dispose();

                            Response response = Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(str);
                            if (response.Result)
                            {
                                CustomMessageBox.Show("Recorder Data Clear OK");
                            }
                            else
                            {
                                CustomMessageBox.Show("Error Deleting Data");
                            }
                        }
                    }
                    catch { }

                }), null);
            }
            catch (Exception ee)
            {
                CustomMessageBox.Show(ee.ToString());
            }

            byte[] sendBuff = Encoding.ASCII.GetBytes("/delete");

            udpClient.Send(sendBuff, sendBuff.Length);
        }

        private void Speed_Gauge_ErrorLimitReached(object sender, EventArgs e)
        {
            double CruiseSpeed = 0;

            try
            {
                CruiseSpeed = MainV2.comPort.MAV.param["CRUISE_SPEED"].Value;
            }
            catch { }

            if (CruiseSpeed > 0.1)
            {
                Speed_Gauge.Maximum = Math.Round(CruiseSpeed * 1.6, 1);
                Speed_Gauge.ErrorLimit = Math.Round(Speed_Gauge.Maximum * 0.9, 1);
                Speed_Gauge.WarningLimit = Math.Round(Speed_Gauge.Maximum * 0.7, 1);
            }
            else
            {
                Speed_Gauge.Maximum = Math.Round(Speed_Gauge.Maximum * 1.6, 1);
                Speed_Gauge.ErrorLimit = Math.Round(Speed_Gauge.Maximum * 0.9, 1);
                Speed_Gauge.WarningLimit = Math.Round(Speed_Gauge.Maximum * 0.7, 1);
            }
        }

        private void NUM_DepthAlarmValue_ValueChanged(object sender, EventArgs e)
        {
            Settings.Instance["DEPTH_ALARM"] = NUM_DepthAlarmValue.Value.ToString();
        }

        public void UpdateTiffOverlay()
        {
            try
            {
                //Ancho en m del screen gMapControl1
                double width =
                (gMapControl1.MapProvider.Projection.GetDistance(gMapControl1.FromLocalToLatLng(0, 0),
                    gMapControl1.FromLocalToLatLng(gMapControl1.Width, 0)) * 1000.0);

                //Alto en m del screen gMapControl1
                double height =
                    (gMapControl1.MapProvider.Projection.GetDistance(gMapControl1.FromLocalToLatLng(0, 0),
                        gMapControl1.FromLocalToLatLng(gMapControl1.Height, 0)) * 1000.0);

                //Res en m/pixel
                double m2pixelwidth = width / gMapControl1.Width;
                double m2pixelheight = height / gMapControl1.Height;

                //Calcular el nuevo tamaño del Marker segun la nueva res del mapa.
                if(tiffMarker != null)
                {
                    tiffMarker.Size = new Size((int)(FlightPlanner.instance.geoTiffMetaData.Width_m / m2pixelwidth), (int)(FlightPlanner.instance.geoTiffMetaData.Height_m / m2pixelheight));
                    tiffMarker.IsVisible = true;
                }
            }
            catch(Exception ex)
            { }
        }


    }
    }


